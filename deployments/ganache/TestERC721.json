{
  "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
  "receipt": {
    "to": null,
    "from": "0x889976c9BB7078F5538A7c8A07a5A303A394C251",
    "contractAddress": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
    "transactionIndex": 0,
    "gasUsed": "1781080",
    "logsBloom": "0x
    "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a",
    "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x1a327ef88b14c5819389549a77a618f38e7aa33898f962d47bfcf8391542e210",
        "address": "0xEa9984D980E9353aCfc82A01E21D5FD58646c1a5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xb104b23bb0fddb9cc345a30cdf255b837737ce12f51dd4c6a067d3fc05c4028a"
      }
    ],
    "blockNumber": 8,
    "cumulativeGasUsed": "1781080",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "204b232b302544132ad208368cbc8054",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestERC721.sol\":\"TestERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":false,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/TestERC721.sol\":{\"content\":\"// SPDX-License-Identifier: LicenseRef-DSPL\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\ncontract TestERC721 is Ownable, ERC721 {\\r\\n\\tconstructor() ERC721(\\\"Test ERC721 Token\\\", \\\"TestERC721\\\") {\\r\\n\\t\\tfor (uint i = 0; i < 10; i++) {\\r\\n\\t\\t\\t_safeMint(payable(owner()), i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x99a316bd9385a900e12e334d920ef2466865809aae4c1a1a70a56036a7f79174\",\"license\":\"LicenseRef-DSPL\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051806040016040528060118152602001702a32b9ba1022a9219b9918902a37b5b2b760791b8152506040518060400160405280600a8152602001695465737445524337323160b01b8152506200007962000073620000e560201b60201c565b620000e9565b81516200008e906001906020850190620003ed565b508051620000a4906002906020840190620003ed565b50505060005b600a811015620000de57620000c9620000c262000139565b8262000148565b80620000d581620004ac565b915050620000aa565b50620007e6565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031690565b6200016a8282604051806020016040528060008152506200016e60201b60201c565b5050565b6200017a8383620001b6565b620001896000848484620002a1565b620001b15760405162461bcd60e51b8152600401620001a89062000544565b60405180910390fd5b505050565b6001600160a01b038216620001df5760405162461bcd60e51b8152600401620001a890620005a4565b620001ea81620003ca565b156200020a5760405162461bcd60e51b8152600401620001a890620005f7565b6200021860008383620001b1565b6001600160a01b03821660009081526004602052604081208054600192906200024390849062000609565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620002c2846001600160a01b0316620003e760201b6200076c1760201c565b15620003be576001600160a01b03841663150b7a02620002e1620000e5565b8786866040518563ffffffff1660e01b8152600401620003059493929190620006f4565b6020604051808303816000875af192505050801562000343575060408051601f3d908101601f19168201909252620003409181019062000779565b60015b620003a3573d80801562000374576040519150601f19603f3d011682016040523d82523d6000602084013e62000379565b606091505b5080516200039b5760405162461bcd60e51b8152600401620001a89062000544565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050620003c2565b5060015b949350505050565b6000908152600360205260409020546001600160a01b0316151590565b3b151590565b828054620003fb90620007b5565b90600052602060002090601f0160209004810192826200041f57600085556200046a565b82601f106200043a57805160ff19168380011785556200046a565b828001600101855582156200046a579182015b828111156200046a5782518255916020019190600101906200044d565b50620004789291506200047c565b5090565b5b808211156200047857600081556001016200047d565b634e487b7160e01b600052601160045260246000fd5b90565b6000620004b982620004a9565b9150600019821415620004d057620004d062000493565b5060010190565b90815260200190565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602090910152565b600062000530603283620004d7565b91506200053d82620004e0565b5060400190565b60208082528101620005568162000521565b92915050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573739052565b600062000590602083620004d7565b91506200059d826200055c565b5060200190565b60208082528101620005568162000581565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000009052565b6000620005ea601c83620004d7565b91506200059d82620005b6565b602080825281016200055681620005db565b60006200061682620004a9565b91506200062383620004a9565b9250821982111562000639576200063962000493565b500190565b6001600160a01b031690565b600062000556826200063e565b62000662816200064a565b82525050565b6200066281620004a9565b5190565b60005b83811015620006945781810151838201526020016200067a565b83811115620006a4576000848401525b50505050565b601f01601f191690565b6000620006c18262000673565b620006cd8185620004d7565b9350620006df81856020860162000677565b620006ea81620006aa565b9093019392505050565b6080810162000704828762000657565b62000713602083018662000657565b62000722604083018562000668565b8181036060830152620007368184620006b4565b9695505050505050565b600080fd5b6001600160e01b03191690565b6200075d8162000745565b81146200076957600080fd5b50565b8051620005568162000752565b60006020828403121562000791576200079162000740565b6000620003c284846200076c565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620007ca57607f821691505b60208210811415620007e057620007e06200079f565b50919050565b61182d80620007f66000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063b88d4fde11610066578063b88d4fde146101fc578063c87b56dd1461020f578063e985e9c514610222578063f2fde38b1461023557610100565b8063715018a6146101d15780638da5cb5b146101d957806395d89b41146101e1578063a22cb465146101e957610100565b806323b872dd116100d357806323b872dd1461017857806342842e0e1461018b5780636352211e1461019e57806370a08231146101b157610100565b806301ffc9a71461010557806306fdde031461012e578063081812fc14610143578063095ea7b314610163575b600080fd5b610118610113366004610c9e565b610248565b6040516101259190610cd3565b60405180910390f35b610136610290565b6040516101259190610d5c565b610156610151366004610d84565b610322565b6040516101259190610dc5565b610176610171366004610de7565b61036e565b005b610176610186366004610e24565b610406565b610176610199366004610e24565b61043e565b6101566101ac366004610d84565b610459565b6101c46101bf366004610e74565b61048e565b6040516101259190610e9e565b6101766104d2565b61015661051d565b61013661052c565b6101766101f7366004610ec0565b61053b565b61017661020a366004610fea565b610609565b61013661021d366004610d84565b610648565b610118610230366004611069565b6106cb565b610176610243366004610e74565b6106fb565b60006001600160e01b031982166380ac58cd60e01b148061027957506001600160e01b03198216635b5e139f60e01b145b80610288575061028882610772565b90505b919050565b60606001805461029f906110b2565b80601f01602080910402602001604051908101604052809291908181526020018280546102cb906110b2565b80156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b5050505050905090565b600061032d8261078b565b6103525760405162461bcd60e51b815260040161034990611139565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061037982610459565b9050806001600160a01b0316836001600160a01b031614156103ad5760405162461bcd60e51b815260040161034990611191565b806001600160a01b03166103bf6107a8565b6001600160a01b031614806103db57506103db816102306107a8565b6103f75760405162461bcd60e51b815260040161034990611205565b61040183836107ac565b505050565b6104176104116107a8565b8261081a565b6104335760405162461bcd60e51b81526004016103499061126d565b61040183838361089f565b61040183838360405180602001604052806000815250610609565b6000818152600360205260408120546001600160a01b0316806102885760405162461bcd60e51b8152600401610349906112cd565b60006001600160a01b0382166104b65760405162461bcd60e51b81526004016103499061132e565b506001600160a01b031660009081526004602052604090205490565b6104da6107a8565b6001600160a01b03166104eb61051d565b6001600160a01b0316146105115760405162461bcd60e51b815260040161034990611382565b61051b60006109cc565b565b6000546001600160a01b031690565b60606002805461029f906110b2565b6105436107a8565b6001600160a01b0316826001600160a01b031614156105745760405162461bcd60e51b8152600401610349906113cf565b80600660006105816107a8565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556105c56107a8565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516105fd9190610cd3565b60405180910390a35050565b61061a6106146107a8565b8361081a565b6106365760405162461bcd60e51b81526004016103499061126d565b61064284848484610a1c565b50505050565b60606106538261078b565b61066f5760405162461bcd60e51b815260040161034990611435565b6000610679610a4f565b9050600081511161069957604051806020016040528060008152506106c4565b806106a384610a61565b6040516020016106b4929190611474565b6040516020818303038152906040525b9392505050565b6001600160a01b0380831660009081526006602090815260408083209385168352929052205460ff165b92915050565b6107036107a8565b6001600160a01b031661071461051d565b6001600160a01b03161461073a5760405162461bcd60e51b815260040161034990611382565b6001600160a01b0381166107605760405162461bcd60e51b8152600401610349906114d9565b610769816109cc565b50565b3b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600360205260409020546001600160a01b0316151590565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107e182610459565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006108258261078b565b6108415760405162461bcd60e51b81526004016103499061153c565b600061084c83610459565b9050806001600160a01b0316846001600160a01b031614806108875750836001600160a01b031661087c84610322565b6001600160a01b0316145b80610897575061089781856106cb565b949350505050565b826001600160a01b03166108b282610459565b6001600160a01b0316146108d85760405162461bcd60e51b81526004016103499061159c565b6001600160a01b0382166108fe5760405162461bcd60e51b8152600401610349906115f7565b610909838383610401565b6109146000826107ac565b6001600160a01b038316600090815260046020526040812080546001929061093d90849061161d565b90915550506001600160a01b038216600090815260046020526040812080546001929061096b90849061164a565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a2784848461089f565b610a3384848484610b60565b6106425760405162461bcd60e51b8152600401610349906116d1565b60408051602081019091526000815290565b606081610a8657506040805180820190915260018152600360fc1b602082015261028b565b8160005b8115610ab05780610a9a816116e1565b9150610aa99050600a8361171d565b9150610a8a565b60008167ffffffffffffffff811115610acb57610acb610ef3565b6040519080825280601f01601f191660200182016040528015610af5576020820181803683370190505b5090505b841561089757610b0a60018361161d565b9150610b17600a86611747565b610b2290603061164a565b60f81b818381518110610b3757610b37611771565b60200101906001600160f81b031916908160001a905350610b59600a8661171d565b9450610af9565b6000610b74846001600160a01b031661076c565b15610c6157836001600160a01b031663150b7a02610b906107a8565b8786866040518563ffffffff1660e01b8152600401610bb29493929190611787565b6020604051808303816000875af1925050508015610bed575060408051601f3d908101601f19168201909252610bea918101906117d6565b60015b610c47573d808015610c1b576040519150601f19603f3d011682016040523d82523d6000602084013e610c20565b606091505b508051610c3f5760405162461bcd60e51b8152600401610349906116d1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610897565b506001949350505050565b60405190565b6001600160e01b03191690565b610c8881610c72565b811461076957600080fd5b80356106f581610c7f565b600060208284031215610cb357610cb3610100565b60006108978484610c93565b151590565b610ccd81610cbf565b82525050565b602081016106f58284610cc4565b5190565b90815260200190565b60005b83811015610d09578181015183820152602001610cf1565b838111156106425750506000910152565b601f01601f191690565b6000610d2f82610ce1565b610d398185610ce5565b9350610d49818560208601610cee565b610d5281610d1a565b9093019392505050565b602080825281016106c48184610d24565b90565b610c8881610d6d565b80356106f581610d70565b600060208284031215610d9957610d99610100565b60006108978484610d79565b6001600160a01b031690565b600061028882610da5565b610ccd81610db1565b602081016106f58284610dbc565b610c8881610db1565b80356106f581610dd3565b60008060408385031215610dfd57610dfd610100565b6000610e098585610ddc565b9250506020610e1a85828601610d79565b9150509250929050565b600080600060608486031215610e3c57610e3c610100565b6000610e488686610ddc565b9350506020610e5986828701610ddc565b9250506040610e6a86828701610d79565b9150509250925092565b600060208284031215610e8957610e89610100565b60006108978484610ddc565b610ccd81610d6d565b602081016106f58284610e95565b610c8881610cbf565b80356106f581610eac565b60008060408385031215610ed657610ed6610100565b6000610ee28585610ddc565b9250506020610e1a85828601610eb5565b634e487b7160e01b600052604160045260246000fd5b610f1282610d1a565b810181811067ffffffffffffffff82111715610f3057610f30610ef3565b6040525050565b6000610f41610c6c565b905061028b8282610f09565b600067ffffffffffffffff821115610f6757610f67610ef3565b610f7082610d1a565b60200192915050565b82818337506000910152565b6000610f98610f9384610f4d565b610f37565b905082815260208101848484011115610fb357610fb3610100565b610fbe848285610f79565b509392505050565b600082601f830112610fda57610fda610100565b8135610897848260208601610f85565b6000806000806080858703121561100357611003610100565b600061100f8787610ddc565b945050602061102087828801610ddc565b935050604061103187828801610d79565b925050606085013567ffffffffffffffff81111561105157611051610100565b61105d87828801610fc6565b91505092959194509250565b6000806040838503121561107f5761107f610100565b600061108b8585610ddc565b9250506020610e1a85828601610ddc565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806110c657607f821691505b602082108114156110d9576110d961109c565b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b602090910152565b6000611127602c83610ce5565b9150611132826110df565b5060400190565b602080825281016102888161111a565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602090910152565b6000611186602183610ce5565b915061113282611149565b6020808252810161028881611179565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602090910152565b60006111fa603883610ce5565b9150611132826111a1565b60208082528101610288816111ed565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b602090910152565b6000611262603183610ce5565b915061113282611215565b6020808252810161028881611255565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b602090910152565b60006112c2602983610ce5565b91506111328261127d565b60208082528101610288816112b5565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b602090910152565b6000611323602a83610ce5565b9150611132826112dd565b6020808252810161028881611316565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729052565b6000611370602083610ce5565b915061137b8261133e565b5060200190565b6020808252810161028881611363565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000009052565b60006113c4601983610ce5565b915061137b82611392565b60208082528101610288816113b7565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b602090910152565b600061142a602f83610ce5565b9150611132826113df565b602080825281016102888161141d565b600061145082610ce1565b61145a818561028b565b935061146a818560208601610cee565b9290920192915050565b60006114808285611445565b91506108978284611445565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602090910152565b60006114ce602683610ce5565b91506111328261148c565b60208082528101610288816114c1565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b602090910152565b6000611531602c83610ce5565b9150611132826114e9565b6020808252810161028881611524565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981526839903737ba1037bbb760b91b602090910152565b6000611591602983610ce5565b91506111328261154c565b6020808252810161028881611584565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b602090910152565b60006115ec602483610ce5565b9150611132826115ac565b60208082528101610288816115df565b634e487b7160e01b600052601160045260246000fd5b600061162882610d6d565b915061163383610d6d565b92508282101561164557611645611607565b500390565b600061165582610d6d565b915061166083610d6d565b9250821982111561167357611673611607565b500190565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602090910152565b60006116c6603283610ce5565b915061113282611678565b60208082528101610288816116b9565b60006116ec82610d6d565b915060001982141561170057611700611607565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600061172882610d6d565b915061173383610d6d565b92508261174257611742611707565b500490565b600061175282610d6d565b915061175d83610d6d565b92508261176c5761176c611707565b500690565b634e487b7160e01b600052603260045260246000fd5b608081016117958287610dbc565b6117a26020830186610dbc565b6117af6040830185610e95565b81810360608301526117c18184610d24565b9695505050505050565b80516106f581610c7f565b6000602082840312156117eb576117eb610100565b600061089784846117cb56fea2646970667358221220f59dd3336bcfb5cd729a08d644627ff332038b3b4bfadf3d924c66993bf9f5a464736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063b88d4fde11610066578063b88d4fde146101fc578063c87b56dd1461020f578063e985e9c514610222578063f2fde38b1461023557610100565b8063715018a6146101d15780638da5cb5b146101d957806395d89b41146101e1578063a22cb465146101e957610100565b806323b872dd116100d357806323b872dd1461017857806342842e0e1461018b5780636352211e1461019e57806370a08231146101b157610100565b806301ffc9a71461010557806306fdde031461012e578063081812fc14610143578063095ea7b314610163575b600080fd5b610118610113366004610c9e565b610248565b6040516101259190610cd3565b60405180910390f35b610136610290565b6040516101259190610d5c565b610156610151366004610d84565b610322565b6040516101259190610dc5565b610176610171366004610de7565b61036e565b005b610176610186366004610e24565b610406565b610176610199366004610e24565b61043e565b6101566101ac366004610d84565b610459565b6101c46101bf366004610e74565b61048e565b6040516101259190610e9e565b6101766104d2565b61015661051d565b61013661052c565b6101766101f7366004610ec0565b61053b565b61017661020a366004610fea565b610609565b61013661021d366004610d84565b610648565b610118610230366004611069565b6106cb565b610176610243366004610e74565b6106fb565b60006001600160e01b031982166380ac58cd60e01b148061027957506001600160e01b03198216635b5e139f60e01b145b80610288575061028882610772565b90505b919050565b60606001805461029f906110b2565b80601f01602080910402602001604051908101604052809291908181526020018280546102cb906110b2565b80156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b5050505050905090565b600061032d8261078b565b6103525760405162461bcd60e51b815260040161034990611139565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061037982610459565b9050806001600160a01b0316836001600160a01b031614156103ad5760405162461bcd60e51b815260040161034990611191565b806001600160a01b03166103bf6107a8565b6001600160a01b031614806103db57506103db816102306107a8565b6103f75760405162461bcd60e51b815260040161034990611205565b61040183836107ac565b505050565b6104176104116107a8565b8261081a565b6104335760405162461bcd60e51b81526004016103499061126d565b61040183838361089f565b61040183838360405180602001604052806000815250610609565b6000818152600360205260408120546001600160a01b0316806102885760405162461bcd60e51b8152600401610349906112cd565b60006001600160a01b0382166104b65760405162461bcd60e51b81526004016103499061132e565b506001600160a01b031660009081526004602052604090205490565b6104da6107a8565b6001600160a01b03166104eb61051d565b6001600160a01b0316146105115760405162461bcd60e51b815260040161034990611382565b61051b60006109cc565b565b6000546001600160a01b031690565b60606002805461029f906110b2565b6105436107a8565b6001600160a01b0316826001600160a01b031614156105745760405162461bcd60e51b8152600401610349906113cf565b80600660006105816107a8565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556105c56107a8565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516105fd9190610cd3565b60405180910390a35050565b61061a6106146107a8565b8361081a565b6106365760405162461bcd60e51b81526004016103499061126d565b61064284848484610a1c565b50505050565b60606106538261078b565b61066f5760405162461bcd60e51b815260040161034990611435565b6000610679610a4f565b9050600081511161069957604051806020016040528060008152506106c4565b806106a384610a61565b6040516020016106b4929190611474565b6040516020818303038152906040525b9392505050565b6001600160a01b0380831660009081526006602090815260408083209385168352929052205460ff165b92915050565b6107036107a8565b6001600160a01b031661071461051d565b6001600160a01b03161461073a5760405162461bcd60e51b815260040161034990611382565b6001600160a01b0381166107605760405162461bcd60e51b8152600401610349906114d9565b610769816109cc565b50565b3b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600360205260409020546001600160a01b0316151590565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107e182610459565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006108258261078b565b6108415760405162461bcd60e51b81526004016103499061153c565b600061084c83610459565b9050806001600160a01b0316846001600160a01b031614806108875750836001600160a01b031661087c84610322565b6001600160a01b0316145b80610897575061089781856106cb565b949350505050565b826001600160a01b03166108b282610459565b6001600160a01b0316146108d85760405162461bcd60e51b81526004016103499061159c565b6001600160a01b0382166108fe5760405162461bcd60e51b8152600401610349906115f7565b610909838383610401565b6109146000826107ac565b6001600160a01b038316600090815260046020526040812080546001929061093d90849061161d565b90915550506001600160a01b038216600090815260046020526040812080546001929061096b90849061164a565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a2784848461089f565b610a3384848484610b60565b6106425760405162461bcd60e51b8152600401610349906116d1565b60408051602081019091526000815290565b606081610a8657506040805180820190915260018152600360fc1b602082015261028b565b8160005b8115610ab05780610a9a816116e1565b9150610aa99050600a8361171d565b9150610a8a565b60008167ffffffffffffffff811115610acb57610acb610ef3565b6040519080825280601f01601f191660200182016040528015610af5576020820181803683370190505b5090505b841561089757610b0a60018361161d565b9150610b17600a86611747565b610b2290603061164a565b60f81b818381518110610b3757610b37611771565b60200101906001600160f81b031916908160001a905350610b59600a8661171d565b9450610af9565b6000610b74846001600160a01b031661076c565b15610c6157836001600160a01b031663150b7a02610b906107a8565b8786866040518563ffffffff1660e01b8152600401610bb29493929190611787565b6020604051808303816000875af1925050508015610bed575060408051601f3d908101601f19168201909252610bea918101906117d6565b60015b610c47573d808015610c1b576040519150601f19603f3d011682016040523d82523d6000602084013e610c20565b606091505b508051610c3f5760405162461bcd60e51b8152600401610349906116d1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610897565b506001949350505050565b60405190565b6001600160e01b03191690565b610c8881610c72565b811461076957600080fd5b80356106f581610c7f565b600060208284031215610cb357610cb3610100565b60006108978484610c93565b151590565b610ccd81610cbf565b82525050565b602081016106f58284610cc4565b5190565b90815260200190565b60005b83811015610d09578181015183820152602001610cf1565b838111156106425750506000910152565b601f01601f191690565b6000610d2f82610ce1565b610d398185610ce5565b9350610d49818560208601610cee565b610d5281610d1a565b9093019392505050565b602080825281016106c48184610d24565b90565b610c8881610d6d565b80356106f581610d70565b600060208284031215610d9957610d99610100565b60006108978484610d79565b6001600160a01b031690565b600061028882610da5565b610ccd81610db1565b602081016106f58284610dbc565b610c8881610db1565b80356106f581610dd3565b60008060408385031215610dfd57610dfd610100565b6000610e098585610ddc565b9250506020610e1a85828601610d79565b9150509250929050565b600080600060608486031215610e3c57610e3c610100565b6000610e488686610ddc565b9350506020610e5986828701610ddc565b9250506040610e6a86828701610d79565b9150509250925092565b600060208284031215610e8957610e89610100565b60006108978484610ddc565b610ccd81610d6d565b602081016106f58284610e95565b610c8881610cbf565b80356106f581610eac565b60008060408385031215610ed657610ed6610100565b6000610ee28585610ddc565b9250506020610e1a85828601610eb5565b634e487b7160e01b600052604160045260246000fd5b610f1282610d1a565b810181811067ffffffffffffffff82111715610f3057610f30610ef3565b6040525050565b6000610f41610c6c565b905061028b8282610f09565b600067ffffffffffffffff821115610f6757610f67610ef3565b610f7082610d1a565b60200192915050565b82818337506000910152565b6000610f98610f9384610f4d565b610f37565b905082815260208101848484011115610fb357610fb3610100565b610fbe848285610f79565b509392505050565b600082601f830112610fda57610fda610100565b8135610897848260208601610f85565b6000806000806080858703121561100357611003610100565b600061100f8787610ddc565b945050602061102087828801610ddc565b935050604061103187828801610d79565b925050606085013567ffffffffffffffff81111561105157611051610100565b61105d87828801610fc6565b91505092959194509250565b6000806040838503121561107f5761107f610100565b600061108b8585610ddc565b9250506020610e1a85828601610ddc565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806110c657607f821691505b602082108114156110d9576110d961109c565b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b602090910152565b6000611127602c83610ce5565b9150611132826110df565b5060400190565b602080825281016102888161111a565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602090910152565b6000611186602183610ce5565b915061113282611149565b6020808252810161028881611179565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602090910152565b60006111fa603883610ce5565b9150611132826111a1565b60208082528101610288816111ed565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b602090910152565b6000611262603183610ce5565b915061113282611215565b6020808252810161028881611255565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b602090910152565b60006112c2602983610ce5565b91506111328261127d565b60208082528101610288816112b5565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b602090910152565b6000611323602a83610ce5565b9150611132826112dd565b6020808252810161028881611316565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729052565b6000611370602083610ce5565b915061137b8261133e565b5060200190565b6020808252810161028881611363565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000009052565b60006113c4601983610ce5565b915061137b82611392565b60208082528101610288816113b7565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b602090910152565b600061142a602f83610ce5565b9150611132826113df565b602080825281016102888161141d565b600061145082610ce1565b61145a818561028b565b935061146a818560208601610cee565b9290920192915050565b60006114808285611445565b91506108978284611445565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602090910152565b60006114ce602683610ce5565b91506111328261148c565b60208082528101610288816114c1565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b602090910152565b6000611531602c83610ce5565b9150611132826114e9565b6020808252810161028881611524565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981526839903737ba1037bbb760b91b602090910152565b6000611591602983610ce5565b91506111328261154c565b6020808252810161028881611584565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b602090910152565b60006115ec602483610ce5565b9150611132826115ac565b60208082528101610288816115df565b634e487b7160e01b600052601160045260246000fd5b600061162882610d6d565b915061163383610d6d565b92508282101561164557611645611607565b500390565b600061165582610d6d565b915061166083610d6d565b9250821982111561167357611673611607565b500190565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602090910152565b60006116c6603283610ce5565b915061113282611678565b60208082528101610288816116b9565b60006116ec82610d6d565b915060001982141561170057611700611607565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600061172882610d6d565b915061173383610d6d565b92508261174257611742611707565b500490565b600061175282610d6d565b915061175d83610d6d565b92508261176c5761176c611707565b500690565b634e487b7160e01b600052603260045260246000fd5b608081016117958287610dbc565b6117a26020830186610dbc565b6117af6040830185610e95565b81810360608301526117c18184610d24565b9695505050505050565b80516106f581610c7f565b6000602082840312156117eb576117eb610100565b600061089784846117cb56fea2646970667358221220f59dd3336bcfb5cd729a08d644627ff332038b3b4bfadf3d924c66993bf9f5a464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 899,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3278,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3280,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3284,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3288,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3292,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3298,
        "contract": "contracts/TestERC721.sol:TestERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}