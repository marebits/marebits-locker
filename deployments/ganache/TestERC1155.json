{
  "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
  "receipt": {
    "to": null,
    "from": "0x889976c9BB7078F5538A7c8A07a5A303A394C251",
    "contractAddress": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
    "transactionIndex": 0,
    "gasUsed": "1848437",
    "logsBloom": "0x
    "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb",
    "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 3,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 4,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 5,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 8,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 9,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 10,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9ddd4418441a10a0cd712ff8a650ff30ea7ceaa3e0240f39618e04fc867d2298",
        "address": "0x1e1655108b6A422C7699c515f3Da33e7d07A11dc",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889976c9bb7078f5538a7c8a07a5a303a394c251"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003635c9adc5dea00000",
        "logIndex": 11,
        "blockHash": "0xac837934d2db61955d416e33c09576018354c9c83f909052634b2f9d0d63bcdb"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "1848437",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "204b232b302544132ad208368cbc8054",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestERC1155.sol\":\"TestERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":false,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/TestERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: LicenseRef-DSPL\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\ncontract TestERC1155 is Ownable, ERC1155 {\\r\\n\\tconstructor() ERC1155(\\\"https://mare.biz/test/\\\") {\\r\\n\\t\\tfor (uint i = 0; i < 10; i++) {\\r\\n\\t\\t\\t_mint(payable(owner()), i + 1, 1, \\\"\\\");\\r\\n\\t\\t}\\r\\n\\t\\t_mint(payable(owner()), 0, 1000 ether, \\\"\\\");\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x871f0a67595d0ea90b317bd6589b96af877fcac19b8a4fd91a05df458dce518c\",\"license\":\"LicenseRef-DSPL\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060408051808201909152601681527f68747470733a2f2f6d6172652e62697a2f746573742f0000000000000000000060208201526200005a62000054620000f8565b620000fd565b62000065816200014d565b5060005b600a811015620000bb57620000a66200008162000166565b6200008e600184620004e0565b60408051602081019091526000815260019062000175565b80620000b28162000515565b91505062000069565b50620000f2620000ca62000166565b6000683635c9adc5dea00000604051806020016040528060008152506200017560201b60201c565b620009b8565b335b90565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516200016290600390602084019062000424565b5050565b6000546001600160a01b031690565b6001600160a01b038416620001a75760405162461bcd60e51b81526004016200019e906200059c565b60405180910390fd5b6000620001b3620000f8565b9050620001da81600087620001c88862000287565b620001d38862000287565b87620002d5565b60008481526001602090815260408083206001600160a01b0389168452909152812080548592906200020e908490620004e0565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405162000267929190620005c5565b60405180910390a46200028081600087878787620002dd565b5050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110620002c457620002c462000601565b602090810291909101015292915050565b505050505050565b620002fc846001600160a01b03166200041e60201b620006511760201c565b15620002d55760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620003389089908990889088908890600401620006bc565b6020604051808303816000875af192505050801562000376575060408051601f3d908101601f19168201909252620003739181019062000757565b60015b620003e257620003856200078b565b806308c379a01415620003c657506200039d620007e1565b80620003aa5750620003c8565b8060405162461bcd60e51b81526004016200019e91906200087f565b505b60405162461bcd60e51b81526004016200019e90620008fa565b6001600160e01b0319811663f23a6e6160e01b14620004155760405162461bcd60e51b81526004016200019e906200095f565b50505050505050565b3b151590565b828054620004329062000987565b90600052602060002090601f016020900481019282620004565760008555620004a1565b82601f106200047157805160ff1916838001178555620004a1565b82800160010185558215620004a1579182015b82811115620004a157825182559160200191906001019062000484565b50620004af929150620004b3565b5090565b5b80821115620004af5760008155600101620004b4565b634e487b7160e01b600052601160045260246000fd5b6000620004ed82620000fa565b9150620004fa83620000fa565b92508219821115620005105762000510620004ca565b500190565b60006200052282620000fa565b9150600019821415620005395762000539620004ca565b5060010190565b90815260200190565b7f455243313135353a206d696e7420746f20746865207a65726f206164647265738152607360f81b602090910152565b60006200058860218362000540565b9150620005958262000549565b5060400190565b60208082528101620005ae8162000579565b92915050565b620005bf81620000fa565b82525050565b60408101620005d58285620005b4565b620005e46020830184620005b4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b031690565b6000620005ae8262000617565b620005bf8162000623565b5190565b60005b838110156200065c57818101518382015260200162000642565b838111156200066c576000848401525b50505050565b601f01601f191690565b600062000689826200063b565b62000695818562000540565b9350620006a78185602086016200063f565b620006b28162000672565b9093019392505050565b60a08101620006cc828862000630565b620006db602083018762000630565b620006ea6040830186620005b4565b620006f96060830185620005b4565b81810360808301526200070d81846200067c565b979650505050505050565b60405190565b600080fd5b6001600160e01b03191690565b6200073b8162000723565b81146200074757600080fd5b50565b8051620005ae8162000730565b6000602082840312156200076f576200076f6200071e565b60006200077d84846200074a565b949350505050565b60e01c90565b600060033d1115620000fa5760046000803e620007aa60005162000785565b905090565b620007ba8262000672565b81018181106001600160401b0382111715620007da57620007da620005eb565b6040525050565b600060443d1015620007f357620000fa565b620007fd62000718565b60043d036004823e80513d60248201116001600160401b038211171562000826575050620000fa565b80820180516001600160401b03811115620008455750505050620000fa565b80602083010160043d03850181111562000864575050505050620000fa565b6200087582602001850186620007af565b5090935050505090565b60208082528101620005e481846200067c565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353581527f526563656976657220696d706c656d656e746572000000000000000000000000602090910152565b6000620008ed60348362000540565b9150620005958262000892565b60208082528101620005ae81620008de565b7f455243313135353a204552433131353552656365697665722072656a656374658152676420746f6b656e7360c01b602090910152565b60006200095260288362000540565b915062000595826200090c565b60208082528101620005ae8162000943565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200099c57607f821691505b60208210811415620009b257620009b262000971565b50919050565b6119c680620009c86000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c8063715018a611610071578063715018a61461014b5780638da5cb5b14610153578063a22cb46514610168578063e985e9c51461017b578063f242432a1461018e578063f2fde38b146101a1576100a8565b8062fdd58e146100ad57806301ffc9a7146100d65780630e89341c146100f65780632eb2c2d6146101165780634e1273f41461012b575b600080fd5b6100c06100bb366004610c36565b6101b4565b6040516100cd9190610c82565b60405180910390f35b6100e96100e4366004610cb1565b610210565b6040516100cd9190610ce8565b610109610104366004610cf6565b610258565b6040516100cd9190610d96565b610129610124366004610f40565b6102ec565b005b61013e61013936600461107e565b61034a565b6040516100cd9190611159565b610129610432565b61015b61047d565b6040516100cd9190611173565b610129610176366004611195565b61048d565b6100e96101893660046111c8565b61055b565b61012961019c3660046111fb565b610589565b6101296101af366004611255565b6105e0565b60006001600160a01b0383166101e55760405162461bcd60e51b81526004016101dc906112cf565b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061024157506001600160e01b031982166303a24d0760e21b145b80610250575061025082610657565b90505b919050565b606060038054610267906112f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610293906112f5565b80156102e05780601f106102b5576101008083540402835291602001916102e0565b820191906000526020600020905b8154815290600101906020018083116102c357829003601f168201915b50505050509050919050565b6102f4610670565b6001600160a01b0316856001600160a01b0316148061031a575061031a85610189610670565b6103365760405162461bcd60e51b81526004016101dc9061137b565b6103438585858585610674565b5050505050565b6060815183511461036d5760405162461bcd60e51b81526004016101dc906113db565b6000835167ffffffffffffffff81111561038957610389610dae565b6040519080825280602002602001820160405280156103b2578160200160208202803683370190505b50905060005b845181101561042a576103fd8582815181106103d6576103d66113eb565b60200260200101518583815181106103f0576103f06113eb565b60200260200101516101b4565b82828151811061040f5761040f6113eb565b602090810291909101015261042381611417565b90506103b8565b509392505050565b61043a610670565b6001600160a01b031661044b61047d565b6001600160a01b0316146104715760405162461bcd60e51b81526004016101dc90611481565b61047b600061082c565b565b6000546001600160a01b03165b90565b816001600160a01b031661049f610670565b6001600160a01b031614156104c65760405162461bcd60e51b81526004016101dc906114e1565b80600260006104d3610670565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610517610670565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161054f9190610ce8565b60405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b610591610670565b6001600160a01b0316856001600160a01b031614806105b757506105b785610189610670565b6105d35760405162461bcd60e51b81526004016101dc90611541565b610343858585858561087c565b6105e8610670565b6001600160a01b03166105f961047d565b6001600160a01b03161461061f5760405162461bcd60e51b81526004016101dc90611481565b6001600160a01b0381166106455760405162461bcd60e51b81526004016101dc9061159e565b61064e8161082c565b50565b3b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b81518351146106955760405162461bcd60e51b81526004016101dc906115fd565b6001600160a01b0384166106bb5760405162461bcd60e51b81526004016101dc90611659565b60006106c5610670565b90506106d5818787878787610824565b60005b84518110156107be5760008582815181106106f5576106f56113eb565b602002602001015190506000858381518110610713576107136113eb565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156107645760405162461bcd60e51b81526004016101dc906116ba565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906107a39084906116ca565b92505081905550505050806107b790611417565b90506106d8565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161080e9291906116f8565b60405180910390a46108248187878787876109c3565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0384166108a25760405162461bcd60e51b81526004016101dc90611659565b60006108ac610670565b90506108cc8187876108bd88610ad9565b6108c688610ad9565b87610824565b60008481526001602090815260408083206001600160a01b038a1684529091529020548381101561090f5760405162461bcd60e51b81526004016101dc906116ba565b60008581526001602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061094e9084906116ca565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516109a492919061171d565b60405180910390a46109ba828888888888610b24565b50505050505050565b6109d5846001600160a01b0316610651565b156108245760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610a0e9089908990889088908890600401611738565b6020604051808303816000875af1925050508015610a49575060408051601f3d908101601f19168201909252610a46918101906117a3565b60015b610aa957610a556117ca565b806308c379a01415610a8f5750610a6a6117eb565b80610a755750610a91565b8060405162461bcd60e51b81526004016101dc9190610d96565b505b60405162461bcd60e51b81526004016101dc906118da565b6001600160e01b0319811663bc197c8160e01b146109ba5760405162461bcd60e51b81526004016101dc90611939565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610b1357610b136113eb565b602090810291909101015292915050565b610b36846001600160a01b0316610651565b156108245760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610b6f9089908990889088908890600401611949565b6020604051808303816000875af1925050508015610baa575060408051601f3d908101601f19168201909252610ba7918101906117a3565b60015b610bb657610a556117ca565b6001600160e01b0319811663f23a6e6160e01b146109ba5760405162461bcd60e51b81526004016101dc90611939565b60405190565b6001600160a01b031690565b600061025082610bec565b610c0c81610bf8565b811461064e57600080fd5b803561020a81610c03565b610c0c8161048a565b803561020a81610c22565b60008060408385031215610c4c57610c4c6100a8565b6000610c588585610c17565b9250506020610c6985828601610c2b565b9150509250929050565b610c7c8161048a565b82525050565b6020810161020a8284610c73565b6001600160e01b03191690565b610c0c81610c90565b803561020a81610c9d565b600060208284031215610cc657610cc66100a8565b6000610cd28484610ca6565b949350505050565b151590565b610c7c81610cda565b6020810161020a8284610cdf565b600060208284031215610d0b57610d0b6100a8565b6000610cd28484610c2b565b5190565b90815260200190565b60005b83811015610d3f578181015183820152602001610d27565b83811115610d4e576000848401525b50505050565b601f01601f191690565b6000610d6982610d17565b610d738185610d1b565b9350610d83818560208601610d24565b610d8c81610d54565b9093019392505050565b60208082528101610da78184610d5e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b610dcd82610d54565b810181811067ffffffffffffffff82111715610deb57610deb610dae565b6040525050565b6000610dfc610be6565b90506102538282610dc4565b600067ffffffffffffffff821115610e2257610e22610dae565b5060209081020190565b6000610e3f610e3a84610e08565b610df2565b83815290506020808201908402830185811115610e5e57610e5e6100a8565b835b81811015610e825780610e738882610c2b565b84525060209283019201610e60565b5050509392505050565b600082601f830112610ea057610ea06100a8565b8135610cd2848260208601610e2c565b600067ffffffffffffffff821115610eca57610eca610dae565b610ed382610d54565b60200192915050565b82818337506000910152565b6000610ef6610e3a84610eb0565b905082815260208101848484011115610f1157610f116100a8565b61042a848285610edc565b600082601f830112610f3057610f306100a8565b8135610cd2848260208601610ee8565b600080600080600060a08688031215610f5b57610f5b6100a8565b6000610f678888610c17565b9550506020610f7888828901610c17565b945050604086013567ffffffffffffffff811115610f9857610f986100a8565b610fa488828901610e8c565b935050606086013567ffffffffffffffff811115610fc457610fc46100a8565b610fd088828901610e8c565b925050608086013567ffffffffffffffff811115610ff057610ff06100a8565b610ffc88828901610f1c565b9150509295509295909350565b6000611017610e3a84610e08565b83815290506020808201908402830185811115611036576110366100a8565b835b81811015610e82578061104b8882610c17565b84525060209283019201611038565b600082601f83011261106e5761106e6100a8565b8135610cd2848260208601611009565b60008060408385031215611094576110946100a8565b823567ffffffffffffffff8111156110ae576110ae6100a8565b6110ba8582860161105a565b925050602083013567ffffffffffffffff8111156110da576110da6100a8565b610c6985828601610e8c565b60200190565b60006110f88383610c73565b505060200190565b600061110b82610d17565b6111158185610d1b565b9350611120836110e6565b8060005b8381101561114e57815161113888826110ec565b9750611143836110e6565b925050600101611124565b509495945050505050565b60208082528101610da78184611100565b610c7c81610bf8565b6020810161020a828461116a565b610c0c81610cda565b803561020a81611181565b600080604083850312156111ab576111ab6100a8565b60006111b78585610c17565b9250506020610c698582860161118a565b600080604083850312156111de576111de6100a8565b60006111ea8585610c17565b9250506020610c6985828601610c17565b600080600080600060a08688031215611216576112166100a8565b60006112228888610c17565b955050602061123388828901610c17565b945050604061124488828901610c2b565b9350506060610fd088828901610c2b565b60006020828403121561126a5761126a6100a8565b6000610cd28484610c17565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a81526a65726f206164647265737360a81b602090910152565b60006112bd602b83610d1b565b91506112c882611276565b5060400190565b60208082528101610250816112b0565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061130957607f821691505b6020821081141561131c5761131c6112df565b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f74208152711bdddb995c881b9bdc88185c1c1c9bdd995960721b602090910152565b6000611370603283610d1b565b91506112c882611322565b6020808252810161025081611363565b7f455243313135353a206163636f756e747320616e6420696473206c656e677468815268040dad2e6dac2e8c6d60bb1b602090910152565b60006113d0602983610d1b565b91506112c88261138b565b60208082528101610250816113c3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006114228261048a565b915060001982141561143657611436611401565b5060010190565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729052565b600061146f602083610d1b565b915061147a8261143d565b5060200190565b6020808252810161025081611462565b7f455243313135353a2073657474696e6720617070726f76616c20737461747573815268103337b91039b2b63360b91b602090910152565b60006114d6602983610d1b565b91506112c882611491565b60208082528101610250816114c9565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7281526808185c1c1c9bdd995960ba1b602090910152565b6000611536602983610d1b565b91506112c8826114f1565b6020808252810161025081611529565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602090910152565b6000611593602683610d1b565b91506112c882611551565b6020808252810161025081611586565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e677468208152670dad2e6dac2e8c6d60c31b602090910152565b60006115f2602883610d1b565b91506112c8826115ae565b60208082528101610250816115e5565b7f455243313135353a207472616e7366657220746f20746865207a65726f206164815264647265737360d81b602090910152565b600061164e602583610d1b565b91506112c88261160d565b6020808252810161025081611641565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f81526939103a3930b739b332b960b11b602090910152565b60006116af602a83610d1b565b91506112c882611669565b60208082528101610250816116a2565b60006116d58261048a565b91506116e08361048a565b925082198211156116f3576116f3611401565b500190565b604080825281016117098185611100565b90508181036020830152610cd28184611100565b6040810161172b8285610c73565b610da76020830184610c73565b60a08101611746828861116a565b611753602083018761116a565b81810360408301526117658186611100565b905081810360608301526117798185611100565b9050818103608083015261178d8184610d5e565b979650505050505050565b805161020a81610c9d565b6000602082840312156117b8576117b86100a8565b6000610cd28484611798565b60e01c90565b600060033d111561048a5760046000803e6117e66000516117c4565b905090565b600060443d10156117fb5761048a565b611803610be6565b60043d036004823e80513d602482011167ffffffffffffffff8211171561182b57505061048a565b808201805167ffffffffffffffff811115611849575050505061048a565b80602083010160043d03850181111561186657505050505061048a565b61187582602001850186610dc4565b5090935050505090565b7f455243313135353a207472616e7366657220746f206e6f6e20455243313135358152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b602090910152565b60006118cf603483610d1b565b91506112c88261187f565b60208082528101610250816118c2565b7f455243313135353a204552433131353552656365697665722072656a656374658152676420746f6b656e7360c01b602090910152565b600061192e602883610d1b565b91506112c8826118ea565b6020808252810161025081611921565b60a08101611957828861116a565b611964602083018761116a565b6119716040830186610c73565b61197e6060830185610c73565b818103608083015261178d8184610d5e56fea26469706673582212203e353dbc7b157d28605900d08bc7872ee1f6d00bbc79b03378f55a438a2c4f3764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c8063715018a611610071578063715018a61461014b5780638da5cb5b14610153578063a22cb46514610168578063e985e9c51461017b578063f242432a1461018e578063f2fde38b146101a1576100a8565b8062fdd58e146100ad57806301ffc9a7146100d65780630e89341c146100f65780632eb2c2d6146101165780634e1273f41461012b575b600080fd5b6100c06100bb366004610c36565b6101b4565b6040516100cd9190610c82565b60405180910390f35b6100e96100e4366004610cb1565b610210565b6040516100cd9190610ce8565b610109610104366004610cf6565b610258565b6040516100cd9190610d96565b610129610124366004610f40565b6102ec565b005b61013e61013936600461107e565b61034a565b6040516100cd9190611159565b610129610432565b61015b61047d565b6040516100cd9190611173565b610129610176366004611195565b61048d565b6100e96101893660046111c8565b61055b565b61012961019c3660046111fb565b610589565b6101296101af366004611255565b6105e0565b60006001600160a01b0383166101e55760405162461bcd60e51b81526004016101dc906112cf565b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061024157506001600160e01b031982166303a24d0760e21b145b80610250575061025082610657565b90505b919050565b606060038054610267906112f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610293906112f5565b80156102e05780601f106102b5576101008083540402835291602001916102e0565b820191906000526020600020905b8154815290600101906020018083116102c357829003601f168201915b50505050509050919050565b6102f4610670565b6001600160a01b0316856001600160a01b0316148061031a575061031a85610189610670565b6103365760405162461bcd60e51b81526004016101dc9061137b565b6103438585858585610674565b5050505050565b6060815183511461036d5760405162461bcd60e51b81526004016101dc906113db565b6000835167ffffffffffffffff81111561038957610389610dae565b6040519080825280602002602001820160405280156103b2578160200160208202803683370190505b50905060005b845181101561042a576103fd8582815181106103d6576103d66113eb565b60200260200101518583815181106103f0576103f06113eb565b60200260200101516101b4565b82828151811061040f5761040f6113eb565b602090810291909101015261042381611417565b90506103b8565b509392505050565b61043a610670565b6001600160a01b031661044b61047d565b6001600160a01b0316146104715760405162461bcd60e51b81526004016101dc90611481565b61047b600061082c565b565b6000546001600160a01b03165b90565b816001600160a01b031661049f610670565b6001600160a01b031614156104c65760405162461bcd60e51b81526004016101dc906114e1565b80600260006104d3610670565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610517610670565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161054f9190610ce8565b60405180910390a35050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b610591610670565b6001600160a01b0316856001600160a01b031614806105b757506105b785610189610670565b6105d35760405162461bcd60e51b81526004016101dc90611541565b610343858585858561087c565b6105e8610670565b6001600160a01b03166105f961047d565b6001600160a01b03161461061f5760405162461bcd60e51b81526004016101dc90611481565b6001600160a01b0381166106455760405162461bcd60e51b81526004016101dc9061159e565b61064e8161082c565b50565b3b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b81518351146106955760405162461bcd60e51b81526004016101dc906115fd565b6001600160a01b0384166106bb5760405162461bcd60e51b81526004016101dc90611659565b60006106c5610670565b90506106d5818787878787610824565b60005b84518110156107be5760008582815181106106f5576106f56113eb565b602002602001015190506000858381518110610713576107136113eb565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156107645760405162461bcd60e51b81526004016101dc906116ba565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906107a39084906116ca565b92505081905550505050806107b790611417565b90506106d8565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161080e9291906116f8565b60405180910390a46108248187878787876109c3565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0384166108a25760405162461bcd60e51b81526004016101dc90611659565b60006108ac610670565b90506108cc8187876108bd88610ad9565b6108c688610ad9565b87610824565b60008481526001602090815260408083206001600160a01b038a1684529091529020548381101561090f5760405162461bcd60e51b81526004016101dc906116ba565b60008581526001602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061094e9084906116ca565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516109a492919061171d565b60405180910390a46109ba828888888888610b24565b50505050505050565b6109d5846001600160a01b0316610651565b156108245760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610a0e9089908990889088908890600401611738565b6020604051808303816000875af1925050508015610a49575060408051601f3d908101601f19168201909252610a46918101906117a3565b60015b610aa957610a556117ca565b806308c379a01415610a8f5750610a6a6117eb565b80610a755750610a91565b8060405162461bcd60e51b81526004016101dc9190610d96565b505b60405162461bcd60e51b81526004016101dc906118da565b6001600160e01b0319811663bc197c8160e01b146109ba5760405162461bcd60e51b81526004016101dc90611939565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610b1357610b136113eb565b602090810291909101015292915050565b610b36846001600160a01b0316610651565b156108245760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610b6f9089908990889088908890600401611949565b6020604051808303816000875af1925050508015610baa575060408051601f3d908101601f19168201909252610ba7918101906117a3565b60015b610bb657610a556117ca565b6001600160e01b0319811663f23a6e6160e01b146109ba5760405162461bcd60e51b81526004016101dc90611939565b60405190565b6001600160a01b031690565b600061025082610bec565b610c0c81610bf8565b811461064e57600080fd5b803561020a81610c03565b610c0c8161048a565b803561020a81610c22565b60008060408385031215610c4c57610c4c6100a8565b6000610c588585610c17565b9250506020610c6985828601610c2b565b9150509250929050565b610c7c8161048a565b82525050565b6020810161020a8284610c73565b6001600160e01b03191690565b610c0c81610c90565b803561020a81610c9d565b600060208284031215610cc657610cc66100a8565b6000610cd28484610ca6565b949350505050565b151590565b610c7c81610cda565b6020810161020a8284610cdf565b600060208284031215610d0b57610d0b6100a8565b6000610cd28484610c2b565b5190565b90815260200190565b60005b83811015610d3f578181015183820152602001610d27565b83811115610d4e576000848401525b50505050565b601f01601f191690565b6000610d6982610d17565b610d738185610d1b565b9350610d83818560208601610d24565b610d8c81610d54565b9093019392505050565b60208082528101610da78184610d5e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b610dcd82610d54565b810181811067ffffffffffffffff82111715610deb57610deb610dae565b6040525050565b6000610dfc610be6565b90506102538282610dc4565b600067ffffffffffffffff821115610e2257610e22610dae565b5060209081020190565b6000610e3f610e3a84610e08565b610df2565b83815290506020808201908402830185811115610e5e57610e5e6100a8565b835b81811015610e825780610e738882610c2b565b84525060209283019201610e60565b5050509392505050565b600082601f830112610ea057610ea06100a8565b8135610cd2848260208601610e2c565b600067ffffffffffffffff821115610eca57610eca610dae565b610ed382610d54565b60200192915050565b82818337506000910152565b6000610ef6610e3a84610eb0565b905082815260208101848484011115610f1157610f116100a8565b61042a848285610edc565b600082601f830112610f3057610f306100a8565b8135610cd2848260208601610ee8565b600080600080600060a08688031215610f5b57610f5b6100a8565b6000610f678888610c17565b9550506020610f7888828901610c17565b945050604086013567ffffffffffffffff811115610f9857610f986100a8565b610fa488828901610e8c565b935050606086013567ffffffffffffffff811115610fc457610fc46100a8565b610fd088828901610e8c565b925050608086013567ffffffffffffffff811115610ff057610ff06100a8565b610ffc88828901610f1c565b9150509295509295909350565b6000611017610e3a84610e08565b83815290506020808201908402830185811115611036576110366100a8565b835b81811015610e82578061104b8882610c17565b84525060209283019201611038565b600082601f83011261106e5761106e6100a8565b8135610cd2848260208601611009565b60008060408385031215611094576110946100a8565b823567ffffffffffffffff8111156110ae576110ae6100a8565b6110ba8582860161105a565b925050602083013567ffffffffffffffff8111156110da576110da6100a8565b610c6985828601610e8c565b60200190565b60006110f88383610c73565b505060200190565b600061110b82610d17565b6111158185610d1b565b9350611120836110e6565b8060005b8381101561114e57815161113888826110ec565b9750611143836110e6565b925050600101611124565b509495945050505050565b60208082528101610da78184611100565b610c7c81610bf8565b6020810161020a828461116a565b610c0c81610cda565b803561020a81611181565b600080604083850312156111ab576111ab6100a8565b60006111b78585610c17565b9250506020610c698582860161118a565b600080604083850312156111de576111de6100a8565b60006111ea8585610c17565b9250506020610c6985828601610c17565b600080600080600060a08688031215611216576112166100a8565b60006112228888610c17565b955050602061123388828901610c17565b945050604061124488828901610c2b565b9350506060610fd088828901610c2b565b60006020828403121561126a5761126a6100a8565b6000610cd28484610c17565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a81526a65726f206164647265737360a81b602090910152565b60006112bd602b83610d1b565b91506112c882611276565b5060400190565b60208082528101610250816112b0565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061130957607f821691505b6020821081141561131c5761131c6112df565b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f74208152711bdddb995c881b9bdc88185c1c1c9bdd995960721b602090910152565b6000611370603283610d1b565b91506112c882611322565b6020808252810161025081611363565b7f455243313135353a206163636f756e747320616e6420696473206c656e677468815268040dad2e6dac2e8c6d60bb1b602090910152565b60006113d0602983610d1b565b91506112c88261138b565b60208082528101610250816113c3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006114228261048a565b915060001982141561143657611436611401565b5060010190565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729052565b600061146f602083610d1b565b915061147a8261143d565b5060200190565b6020808252810161025081611462565b7f455243313135353a2073657474696e6720617070726f76616c20737461747573815268103337b91039b2b63360b91b602090910152565b60006114d6602983610d1b565b91506112c882611491565b60208082528101610250816114c9565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7281526808185c1c1c9bdd995960ba1b602090910152565b6000611536602983610d1b565b91506112c8826114f1565b6020808252810161025081611529565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602090910152565b6000611593602683610d1b565b91506112c882611551565b6020808252810161025081611586565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e677468208152670dad2e6dac2e8c6d60c31b602090910152565b60006115f2602883610d1b565b91506112c8826115ae565b60208082528101610250816115e5565b7f455243313135353a207472616e7366657220746f20746865207a65726f206164815264647265737360d81b602090910152565b600061164e602583610d1b565b91506112c88261160d565b6020808252810161025081611641565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f81526939103a3930b739b332b960b11b602090910152565b60006116af602a83610d1b565b91506112c882611669565b60208082528101610250816116a2565b60006116d58261048a565b91506116e08361048a565b925082198211156116f3576116f3611401565b500190565b604080825281016117098185611100565b90508181036020830152610cd28184611100565b6040810161172b8285610c73565b610da76020830184610c73565b60a08101611746828861116a565b611753602083018761116a565b81810360408301526117658186611100565b905081810360608301526117798185611100565b9050818103608083015261178d8184610d5e565b979650505050505050565b805161020a81610c9d565b6000602082840312156117b8576117b86100a8565b6000610cd28484611798565b60e01c90565b600060033d111561048a5760046000803e6117e66000516117c4565b905090565b600060443d10156117fb5761048a565b611803610be6565b60043d036004823e80513d602482011167ffffffffffffffff8211171561182b57505061048a565b808201805167ffffffffffffffff811115611849575050505061048a565b80602083010160043d03850181111561186657505050505061048a565b61187582602001850186610dc4565b5090935050505090565b7f455243313135353a207472616e7366657220746f206e6f6e20455243313135358152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b602090910152565b60006118cf603483610d1b565b91506112c88261187f565b60208082528101610250816118c2565b7f455243313135353a204552433131353552656365697665722072656a656374658152676420746f6b656e7360c01b602090910152565b600061192e602883610d1b565b91506112c8826118ea565b6020808252810161025081611921565b60a08101611957828861116a565b611964602083018761116a565b6119716040830186610c73565b61197e6060830185610c73565b818103608083015261178d8184610d5e56fea26469706673582212203e353dbc7b157d28605900d08bc7872ee1f6d00bbc79b03378f55a438a2c4f3764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 899,
        "contract": "contracts/TestERC1155.sol:TestERC1155",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1061,
        "contract": "contracts/TestERC1155.sol:TestERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1067,
        "contract": "contracts/TestERC1155.sol:TestERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1069,
        "contract": "contracts/TestERC1155.sol:TestERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}