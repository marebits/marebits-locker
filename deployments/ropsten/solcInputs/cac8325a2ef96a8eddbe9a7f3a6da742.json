{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IMarebitsLocker.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./IMarebitsLockerAccount.sol\";\r\nimport \"./IMarebitsLockerToken.sol\";\r\nimport \"./IMarebitsVault.sol\";\r\nimport \"./IOwnershipTransferrable.sol\";\r\nimport \"./IRecoverable.sol\";\r\nimport \"../libraries/Account.sol\";\r\nimport \"../libraries/Token.sol\";\r\n\r\n/**\r\n * @title The interface for the Mare Bits Locker\r\n * @author Twifag\r\n */\r\ninterface IMarebitsLocker is IOwnershipTransferrable, IRecoverable {\r\n\t/**\r\n\t * @notice Emitted when a token is locked or the lock on a token is extended\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @param owner contract address\r\n\t * @param amount locked in locker\r\n\t * @param tokenContract for the locked token\r\n\t * @param tokenId of the locked token; should always be 0 for locked ERC20 tokens\r\n\t * @param tokenType of token locked; see {Token.Type}\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t */\r\n\tevent TokensLocked(uint256 indexed accountId, address indexed owner, uint256 amount, address tokenContract, uint256 tokenId, Token.Type tokenType, uint64 unlockTime);\r\n\r\n\t/**\r\n\t * @notice Emitted after a Mare Bits Locker Token is redeemed for its locked tokens\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @param owner contract address\r\n\t * @param amount locked in locker\r\n\t * @param tokenContract for the locked token\r\n\t * @param tokenId of the locked token; should always be 0 for locked ERC20 tokens\r\n\t * @param tokenType of token locked; see {Token.Type}\r\n\t */\r\n\tevent TokenRedeemed(uint256 indexed accountId, address indexed owner, uint256 amount, address tokenContract, uint256 tokenId, Token.Type tokenType);\r\n\r\n\t/**\r\n\t * @notice Thrown when the required balance is less than the available balance\r\n\t * @param required balance\r\n\t * @param available balance\r\n\t */\r\n\terror InsufficientBalance(uint256 required, uint256 available);\r\n\r\n\t/**\r\n\t * @notice Thrown when an invalid amount is entered\r\n\t * @param reason amount is invalid\r\n\t */\r\n\terror InvalidAmount(string reason);\r\n\r\n\t/** @notice Thrown when called by an invalid caller (such as a contract) */\r\n\terror InvalidCaller();\r\n\r\n\t/**\r\n\t * @notice Thrown when the given token type `tokenType` is not valid.  Must be 1 for ERC1155, 2 for ERC20, or 3 for ERC721\r\n\t * @param tokenType of the token to check\r\n\t */\r\n\terror InvalidTokenType(Token.Type tokenType);\r\n\r\n\t/** \r\n\t * @notice Thrown when attempting to redeem a token for an account that is still locked\r\n\t * @param expiresAt time when the lock expires (in seconds since UNIX epoch)\r\n\t * @param currentTime (in seconds since UNIX epoch)\r\n\t */\r\n\terror LockedAccount(uint64 expiresAt, uint64 currentTime);\r\n\r\n\t/**\r\n\t * @notice Thrown when someone attempts to interact with this contract who does not hodl $MARE.\r\n\t * @param wallet the address with no $MARE\r\n\t */\r\n\terror NeedsMoreMARE(address wallet);\r\n\r\n\t/**\r\n\t * @notice Thrown when the account does not exist\r\n\t * @param accountId of the account that does not exists\r\n\t */\r\n\terror NonexistentAccount(uint256 accountId);\r\n\r\n\t/**\r\n\t * @notice Thrown when attempting to transfer a token the caller does not own\r\n\t * @param tokenId for the token that is attempting to be transferred\r\n\t * @param claimedOwner of the token\r\n\t * @param actualOwner of the token\r\n\t */\r\n\terror NotTokenOwner(uint256 tokenId, address claimedOwner, address actualOwner);\r\n\r\n\t/**\r\n\t * @notice Thrown when a passed time value is out of the stated bounds\r\n\t * @param given time (in seconds since UNIX epoch)\r\n\t * @param minimum time bound (in seconds since UNIX epoch)\r\n\t * @param maximum time bound (in seconds since UNIX epoch)\r\n\t */\r\n\terror TimeOutOfBounds(uint64 given, uint64 minimum, uint64 maximum);\r\n\r\n\t/**\r\n\t * @notice Thrown when the caller has not approved the token transfer\r\n\t * @param tokenAddress that was attempted to be transferred, the function `approvalFunction` should be called on this address\r\n\t * @param approvalFunction that needs to be called to grant approval\r\n\t */\r\n\terror UnapprovedTokenTransfer(address tokenAddress, string approvalFunction);\r\n\r\n\t/** @notice Thrown when a zero amount is passed */\r\n\terror ZeroAmountGiven();\r\n\r\n\t/**\r\n\t * @notice Internally marks a token as having been burnt\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param accountId representing the account being burned\r\n\t */\r\n\tfunction __burn(uint256 accountId) external;\r\n\r\n\t/**\r\n\t * @notice Extends the `unlockTime` for a given `accountId`\r\n\t * @dev Emits a {TokensLocked} event\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch, must be greater than existing `unlockTime` value)\r\n\t * @return accountId for the locked tokens\r\n\t */\r\n\tfunction extendLock(uint256 accountId, uint64 unlockTime) external returns (uint256);\r\n\r\n\t/**\r\n\t * @notice Gets the account details for the account `accountId`\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return Account.Info representing `accountId`; see {Account.Info}\r\n\t */\r\n\tfunction getAccount(uint256 accountId) external view returns (Account.Info memory);\r\n\r\n\t/**\r\n\t * @notice Locks tokens in a Mare Bits Locker and issues a redeemable Mare Bits Locker Token that can be used to unlock the tokens after the time `unlockTime` has passed\r\n\t * @dev Emits a {TokensLocked} event\r\n\t * @param tokenType of token to be locked; see {Token.Type}\r\n\t * @param tokenContract for the token to be locked\r\n\t * @param tokenId of the token to be locked; should always be 0 for locked ERC20 tokens\r\n\t * @param amount of tokens to lock in locker\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t * @return accountId for the locked tokens\r\n\t */\r\n\tfunction lockTokens(Token.Type tokenType, address tokenContract, uint256 tokenId, uint256 amount, uint64 unlockTime) external returns (uint256);\r\n\r\n\t/**\r\n\t * @notice Redeems (burns) a Mare Bits Locker Token and transfers all locked tokens back to the caller\r\n\t * @dev Emits a {TokenRedeemed} event\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t */\r\n\tfunction redeemToken(uint256 accountId) external;\r\n}"
    },
    "contracts/interfaces/IMarebitsLockerAccount.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"../libraries/Account.sol\";\r\nimport \"../libraries/Token.sol\";\r\nimport \"./IRecoverable.sol\";\r\n\r\n/**\r\n * @title The interface for the Mare Bits Locker Account\r\n * @author Twifag\r\n */\r\ninterface IMarebitsLockerAccount is IRecoverable {\r\n\t/**\r\n\t * @notice Thrown when the account does not exist\r\n\t * @param accountId of the account that does not exists\r\n\t */\r\n\terror NonexistentAccount(uint256 accountId);\r\n\r\n\t/**\r\n\t * @notice Internally marks a token as having been burnt by setting the `isBurned` flag in the {IMarebitsLockerAccount.Account}\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param accountId representing the account being burned\r\n\t */\r\n\tfunction __burn(uint256 accountId) external;\r\n\r\n\t/**\r\n\t * @notice Creates a new {IMarebitsLockerAccount.Account}\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param accountId representing the new account\r\n\t * @param amount of tokens to lock in locker\r\n\t * @param tokenContract for the token to be locked\r\n\t * @param tokenId of the token to be locked; should always be 0 for locked ERC20 tokens\r\n\t * @param tokenType of token to be locked; see {Token.Type}\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t */\r\n\tfunction __createAccount(uint256 accountId, uint256 amount, address tokenContract, uint256 tokenId, Token.Type tokenType, uint64 unlockTime) external;\r\n\r\n\t/**\r\n\t * @notice Marks account `accountId` as redeemed by setting the `amount` to 0, `isRedeemed` to true, and the `unlockTime` to the current time\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param accountId representing the account to redeem\r\n\t */\r\n\tfunction __redeem(uint256 accountId) external;\r\n\r\n\t/**\r\n\t * @notice Updates the amount of tokens locked in this account to `amount`; should only be called during a burn/redemption\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param accountId representing the account\r\n\t * @param amount new amount of tokens to be locked\r\n\t */\r\n\t// function __setAmount(uint256 accountId, uint256 amount) external;\r\n\r\n\t/**\r\n\t * @notice Updates the unlock time of tokens locked in this account to `unlockTime`; called by {IMarebitsLocker.extendLock}\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param accountId representing the account\r\n\t * @param unlockTime in seconds after UNIX epoch\r\n\t */\r\n\tfunction __setUnlockTime(uint256 accountId, uint64 unlockTime) external;\r\n\r\n\t/**\r\n\t *  @notice Gets the account details for the account `accountId`\r\n\t *  @param accountId (also `tokenId`) representing the locked account\r\n\t *  @return Account representing `accountId`; see {IMarebitsLockerAccount.Account}\r\n\t */\r\n\tfunction getAccount(uint256 accountId) external view returns (Account.Info memory);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return uint256 amount of tokens locked in the account `accountId`\r\n\t */\r\n\t// function getAmount(uint256 accountId) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return address token contract address for the tokens locked in the account `accountId`\r\n\t */\r\n\t// function getTokenContract(uint256 accountId) external view returns (address);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return Token.Type type of tokens locked in the account `accountId`; see {Token.Type}\r\n\t */\r\n\t// function getTokenType(uint256 accountId) external view returns (Token.Type);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return uint256 token ID of the tokens locked in the account `accountId`\r\n\t */\r\n\t// function getTokenId(uint256 accountId) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return uint256 time after which tokens locked in the account `accountId` can be withdrawn (in seconds after UNIX epoch)\r\n\t */\r\n\t// function getUnlockTime(uint256 accountId) external view returns (uint64);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return bool true if the account exists; otherwise, false\r\n\t */\r\n\t// function hasAccount(uint256 accountId) external view returns (bool);\r\n\r\n\t/**\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return bool true if the `unlockTime` has expired for the account `accountId`; otherwise, false\r\n\t */\r\n\t// function isUnlocked(uint256 accountId) external view returns (bool);\r\n}"
    },
    "contracts/interfaces/IMarebitsLockerToken.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./IRecoverable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\n\r\n/**\r\n * @title The interface for the Mare Bits Locker Token\r\n * @author Twifag\r\n */\r\ninterface IMarebitsLockerToken is IERC721Metadata, IRecoverable {\r\n\t/**\r\n\t * @notice Emitted when the URI of the token `id` has changed to `value`\r\n\t * @param value of the new token URI\r\n\t * @param id of the token\r\n\t */\r\n\tevent URI(string value, uint256 indexed id);\r\n\r\n\t/**\r\n\t * @notice Thrown when attempting to transfer a token the caller does not own or is not approved to transfer\r\n\t * @param tokenId for the token that is attempting to be transferred\r\n\t */\r\n\terror NotApprovedOrOwner(uint256 tokenId);\r\n\r\n\t/**\r\n\t * @notice Thrown when attempting to make a call that only the owner of this contract's owner can make\r\n\t * @param claimedOwner of the token\r\n\t * @param actualOwner of the token\r\n\t */\r\n\terror NotLockerOwner(address claimedOwner, address actualOwner);\r\n\r\n\t/**\r\n\t * @notice Burns the given token `tokenId`\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param tokenId of the token to burn/destroy\r\n\t */\r\n\tfunction __burn(uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param tokenId to check\r\n\t * @return bool true if the token `tokenId` exists; otherwise, false\r\n\t */\r\n\tfunction __exists(uint256 tokenId) external view returns (bool);\r\n\r\n\t/**\r\n\t * @notice Gets the next token `tokenId` or `accountId`, incrementing the counter `_tokenIdTracker`\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @return tokenId of the next token ID\r\n\t */\r\n\tfunction __getNextTokenId() external returns (uint256 tokenId);\r\n\r\n\t/**\r\n\t * @notice Issues a new token to the address `owner` for the token `tokenId`\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param owner of the newly issued token\r\n\t * @param tokenId to be issued\r\n\t */\r\n\tfunction __issueToken(address payable owner, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @notice Sets the `__baseURI`\r\n\t * @dev Only callable by the {Ownable.owner} of this contract's owner\r\n\t * @param baseURI that will be set as the new baseURI\r\n\t */\r\n\tfunction __setBaseURI(string calldata baseURI) external;\r\n\r\n\t/**\r\n\t * @notice Destroys token `tokenId`.  See {ERC721._burn}\r\n\t * @dev Only callable by the {Ownable.owner} of the implementing contract\r\n\t * @param tokenId of the token to burn/destroy\r\n\t */\r\n\tfunction burn(uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @notice Gets the image URI for token `tokenId`\r\n\t * @param tokenId of the token for which you want the image URI\r\n\t * @return imageUri string token image URI\r\n\t */\r\n\t// function imageURI(uint256 tokenId) external view returns (string memory imageUri);\r\n\r\n\t/**\r\n\t * @notice Returns the URI for the token ID `tokenId`\r\n\t * @dev see {ERC1155.uri}\r\n\t * @param tokenId of the token for which to retreive metadata\r\n\t * @return string metadata for the token\r\n\t */\r\n\t// function uri(uint256 tokenId) external view returns (string memory);\r\n}"
    },
    "contracts/interfaces/IMarebitsVault.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"../libraries/Token.sol\";\r\nimport \"./IRecoverableEther.sol\";\r\n\r\n/**\r\n * @title The interface for the Mare Bits Vault\r\n * @author Twifag\r\n */\r\ninterface IMarebitsVault is IRecoverableEther {\r\n\t/**\r\n\t * @notice Transfers tokens out of this contract and to the original owner\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param tokenType of token to be transferred; see {Token.Type}\r\n\t * @param tokenContract for the token to be transferred\r\n\t * @param to wallet address\r\n\t * @param tokenId of the token to be transferred; should always be 0 for locked ERC20 tokens\r\n\t * @param amount of tokens to be transferred\r\n\t */\r\n\tfunction __transfer(Token.Type tokenType, address tokenContract, address payable to, uint256 tokenId, uint256 amount) external;\r\n}"
    },
    "contracts/interfaces/IOwnershipTransferrable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./IOwnable.sol\";\r\n\r\n/**\r\n * @title Ownable abstract contract\r\n * @dev Represents the [ERC-173](https://eips.ethereum.org/EIPS/eip-173) specification (and a little more)\r\n */\r\ninterface IOwnershipTransferrable is IOwnable {\r\n\t/**\r\n\t * @notice Leaves the contract without owner.  It will not be possible to call `onlyOwner` functions anymore.\r\n\t * @dev Can only be called by the current owner.\r\n\t */\r\n\t// function renounceOwnership() external;\r\n\r\n\t/**\r\n\t * @notice Transfers ownership of the contract to a new account (`newAccount`).\r\n\t * @dev Can only be called by the current owner.\r\n\t * @param newOwner address of the new owner\r\n\t */\r\n\tfunction transferOwnership(address newOwner) external;\r\n}"
    },
    "contracts/interfaces/IRecoverable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./IRecoverableEther.sol\";\r\nimport \"./IRecoverableTokens.sol\";\r\n\r\ninterface IRecoverable is IRecoverableEther, IRecoverableTokens {}"
    },
    "contracts/libraries/Account.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./Token.sol\";\r\n\r\n/**\r\n * @title Account library grouping functions related to an account and the Account.Info struct\r\n * @author Twifag\r\n */\r\nlibrary Account {\r\n\tusing Token for Token.Type;\r\n\r\n\t/**\r\n\t * @dev Data representing an account or issued token\r\n\t * @param accountId of the account; also, the `tokenId` of the Mare Bits Locker Token\r\n\t * @param amount of tokens held\r\n\t * @param tokenId of tokens held; should always be 0 for locked ERC20 tokens\r\n\t * @param tokenContract of tokens held\r\n\t * @param tokenType of tokens held; see {Token.Type}\r\n\t * @param unlockTime after which held tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t * @param isBurned is true if the token representing this account has been burned; otherwise, false\r\n\t * @param isRedeemed is true when token has been redeemed and account is closed; otherwise, false\r\n\t */\r\n\tstruct Info {\r\n\t\tuint256 accountId;\r\n\t\tuint256 amount;\r\n\t\tuint256 tokenId;\r\n\t\taddress tokenContract;\r\n\t\tToken.Type tokenType;\r\n\t\tuint64 unlockTime;\r\n\t\tbool isBurned;\r\n\t\tbool isRedeemed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internally marks a token as having been burnt by setting the `isBurned` flag\r\n\t * @param self represents an {Account.Info}\r\n\t */\r\n\tfunction burn(Info storage self) internal { self.isBurned = true; }\r\n\r\n\t/**\r\n\t * @dev Creates a new {Account.Info} instance\r\n\t * @param self a mapping(uint256 => Info) representing a collection of {Account.Info}s\r\n\t * @param accountId representing the new account\r\n\t * @param amount of tokens to lock in locker\r\n\t * @param tokenContract for the token to be locked\r\n\t * @param tokenId of the token to be locked; should always be 0 for locked ERC20 tokens\r\n\t * @param tokenType of token to be locked; see {Token.Type}\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t */\r\n\tfunction create(mapping(uint256 => Info) storage self, uint256 accountId, uint256 amount, address tokenContract, uint256 tokenId, Token.Type tokenType, uint64 unlockTime) internal {\r\n\t\tself[accountId] = Info({ accountId: accountId, amount: amount, tokenId: tokenId, tokenContract: tokenContract, tokenType: tokenType, unlockTime: unlockTime, isBurned: false, isRedeemed: false });\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Gets the account details for the account `accountId`\r\n\t * @param self a mapping(uint256 => Info) representing a collection of {Account.Info}s\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t * @return Account.Info representing `accountId`; see {Account.Info}\r\n\t */\r\n\tfunction get(mapping(uint256 => Info) storage self, uint256 accountId) internal view returns (Info storage) { return self[accountId]; }\r\n\r\n\t/**\r\n\t * @param self represents an {Account.Info}\r\n\t * @return bool true if the account is defined; otherwise, false\r\n\t */\r\n\tfunction isDefined(Info storage self) internal view returns (bool) { return self.tokenType.isValid(); }\r\n\r\n\t/**\r\n\t * @param self represents an {Account.Info}\r\n\t * @return bool true if the account is unlocked; otherwise, false\r\n\t */\r\n\tfunction isUnlocked(Info storage self) internal view returns (bool) { return uint256(self.unlockTime) <= block.timestamp; }\r\n\r\n\t/**\r\n\t * @dev Marks account `self` as redeemed by setting the `amount` to 0, `isRedeemed` to true, and the `unlockTime` to the current time\r\n\t * @param self represents an {Account.Info}\r\n\t */\r\n\tfunction redeem(Info storage self) internal { (self.amount, self.isRedeemed, self.unlockTime) = (0, true, uint64(block.timestamp)); }\r\n\r\n\t/**\r\n\t * @dev Updates the amount of tokens locked in this account to `amount`; should only be called during a burn/redemption\r\n\t * @param self represents an {Account.Info}\r\n\t * @param amount new amount of tokens to be locked\r\n\t */\r\n\tfunction setAmount(Info storage self, uint256 amount) internal { self.amount = amount; }\r\n\r\n\t/**\r\n\t * @dev Updates the unlock time of tokens locked in this account to `unlockTime`\r\n\t * @param self represents an {Account.Info}\r\n\t * @param unlockTime in seconds after UNIX epoch\r\n\t */\r\n\tfunction setUnlockTime(Info storage self, uint64 unlockTime) internal { self.unlockTime = unlockTime; }\r\n}"
    },
    "contracts/libraries/Token.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nlibrary Token {\r\n\t/** @dev Enum for token types; 0 is UNDEFINED, 1 is ERC1155, 2 is ERC20, and 3 is ERC721 */\r\n\tenum Type { UNDEFINED, ERC1155, ERC20, ERC721 }\r\n\r\n\t/**\r\n\t * @param self representing a {Token.Type}\r\n\t * @return bool true if `self` represents a valid token; otherwise, false\r\n\t */\r\n\tfunction isValid(Type self) internal pure returns (bool) { return self == Type.ERC1155 || self == Type.ERC20 || self == Type.ERC721; }\r\n\r\n\t/**\r\n\t * @param self representing a {Token.Type}\r\n\t * @return bytes9 name of the token type `self`\r\n\t */\r\n\tfunction nameOf(Type self) internal pure returns (bytes9) {\r\n\t\tbytes9[4] memory names = [bytes9(\"UNDEFINED\"), \"ERC1155\", \"ERC20\", \"ERC721\"];\r\n\r\n\t\tif (uint8(self) > names.length - 1) {\r\n\t\t\tself = Type.UNDEFINED;\r\n\t\t}\r\n\t\treturn names[uint8(self)];\r\n\t}\r\n}"
    },
    "contracts/interfaces/IRecoverableEther.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title The abstract Recoverable Ether contract\r\n * @author Twifag\r\n */\r\ninterface IRecoverableEther is IERC165 {\r\n\t/** @notice Thrown when the send fails */\r\n\terror FailedSend();\r\n\r\n\t/**\r\n\t * @notice Recovers ether accidentally sent to this contract\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t */\r\n\tfunction __recoverEther() external payable;\r\n}"
    },
    "contracts/interfaces/IRecoverableTokens.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"../libraries/Token.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title The abstract Recoverable Tokens interface\r\n * @author Twifag\r\n */\r\ninterface IRecoverableTokens is IERC165 {\r\n\t/**\r\n\t * @notice Recovers ERC20, ERC721, or ERC1155 tokens accidentally sent to this contract\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @param tokenType of token to recover; see {Token.Type}\r\n\t * @param tokenContract address of the token to recover\r\n\t * @param tokenId of the token to recover; should always be 0 for ERC20 tokens\r\n\t */\r\n\tfunction __recoverTokens(Token.Type tokenType, address tokenContract, uint256 tokenId) external;\r\n}"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title Ownable abstract contract\r\n * @dev Closely (but not quite, see {TransferrableOwnership}) represents the [ERC-173](https://eips.ethereum.org/EIPS/eip-173) specification\r\n */\r\ninterface IOwnable is IERC165 {\r\n\t/// @notice This emits when ownership of a contract changes.\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/// @notice Thrown when called by any account other than the owner.\r\n\terror CallerIsNotOwner(address caller, address owner);\r\n\r\n\t/// @notice Get the address of the owner\r\n\t/// @return The address of the owner.\r\n\tfunction owner() view external returns(address);\r\n}"
    },
    "contracts/MarebitsLockerToken.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IMarebitsLocker.sol\";\r\nimport \"./interfaces/IMarebitsLockerToken.sol\";\r\nimport \"./interfaces/IOwnable.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Recoverable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\n/**\r\n * @title The implementation for the Mare Bits Locker Token\r\n * @author Twifag\r\n */\r\ncontract MarebitsLockerToken is Recoverable, ERC721Enumerable, KnowsBestPony, IMarebitsLockerToken {\r\n\tusing Strings for uint256;\r\n\r\n\t/** @dev The base URI for computing the {ERC721#tokenURI}, roundabout way of overriding {ERC721#_baseURI} */\r\n\tstring private __baseURI;\r\n\r\n\t/** @dev Optional mapping for image URIs */\r\n\t// mapping(uint256 => string) private _imageURIs;\r\n\r\n\t/** @dev uint256 to keep track of the tokens as they are created */\r\n\tuint256 private _tokenIdTracker;\r\n\r\n\t/** @dev Require that the caller is the same address as the owner of this contract's owner */\r\n\tmodifier onlyLockerOwner() {\r\n\t\taddress lockerOwner = IOwnable(owner()).owner();\r\n\r\n\t\tif (lockerOwner != _msgSender()) {\r\n\t\t\trevert NotLockerOwner(_msgSender(), lockerOwner);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @param name of this token\r\n\t * @param symbol of this token\r\n\t * @param baseURI initially set for this token\r\n\t */\r\n\tconstructor(string memory name, string memory symbol, string memory baseURI) ERC721(name, symbol) { __baseURI = baseURI; }\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\tfunction __burn(uint256 tokenId) external onlyOwner { _burn(tokenId); }\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\tfunction __exists(uint256 tokenId) external view onlyOwner returns (bool) { return _exists(tokenId); }\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\tfunction __getNextTokenId() external onlyOwner returns (uint256 tokenId) { return _tokenIdTracker++; }\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\tfunction __issueToken(address payable owner, uint256 tokenId) external onlyOwner { _safeMint(owner, tokenId); }\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\tfunction __setBaseURI(string calldata baseURI) external onlyLockerOwner { __baseURI = baseURI; }\r\n\r\n\t/** @return string the `__baseURI` */\r\n\tfunction _baseURI() internal view override returns (string memory) { return __baseURI; }\r\n\r\n\t/** \r\n\t * @param path of the URI\r\n\t * @param suffix of the URI\r\n\t * @return string the generated URI by combining `__baseURI`, `path`, and `suffix` */\r\n\tfunction _generateURI(string memory path, string memory suffix) private view returns (string memory) { return string(abi.encodePacked(_baseURI(), path, suffix)); }\r\n\r\n\t/**\r\n\t * @dev Marks the {IMarebitsLockerAccount.Account} as being burned and frees up storage, see {ERC721Enumerable}\r\n\t * @inheritdoc ERC721\r\n\t */\r\n\tfunction _burn(uint256 tokenId) internal override {\r\n\t\tIMarebitsLocker(owner()).__burn(tokenId);\r\n\t\tsuper._burn(tokenId);\r\n\t}\r\n\r\n\t/// @inheritdoc ERC721\r\n\tfunction _mint(address to, uint256 tokenId) internal override {\r\n\t\temit URI(tokenURI(tokenId), tokenId);\r\n\t\tsuper._mint(to, tokenId);\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\tfunction burn(uint256 tokenId) external {\r\n\t\tif (!_isApprovedOrOwner(_msgSender(), tokenId)) {\r\n\t\t\trevert NotApprovedOrOwner(tokenId);\r\n\t\t}\r\n\t\t_burn(tokenId);\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\t// function imageURI(uint256 tokenId) external view returns (string memory) {return _generateURI(tokenId.toString(), \".svg\"); }\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721Enumerable, Recoverable) returns (bool) {\r\n\t\treturn interfaceId == type(IMarebitsLockerToken).interfaceId || \r\n\t\t\tinterfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(Recoverable).interfaceId || \r\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId || \r\n\t\t\tERC721Enumerable.supportsInterface(interfaceId) || \r\n\t\t\tRecoverable.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\t/// @inheritdoc ERC721\r\n\tfunction tokenURI(uint256 tokenId) public view override(ERC721, IERC721Metadata) returns (string memory tokenUri) { tokenUri = _generateURI(tokenId.toString(), \".json\"); }\r\n\r\n\t/// @inheritdoc IMarebitsLockerToken\r\n\t// function uri(uint256 tokenId) external view returns (string memory) { return tokenURI(tokenId); }\r\n}"
    },
    "contracts/KnowsBestPony.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @title The abstract Knows Best Pony contract\r\n * @author Twifag\r\n */\r\nabstract contract KnowsBestPony {\r\n\t/** @return string the absolute best pony (hint: it's Twilight Sparkle) */\r\n\tfunction bestPony() public pure returns (string memory) { return \"Twilight Sparkle is the cutest, smartest, all around best pony!\"; }\r\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IOwnable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title Ownable abstract contract\r\n * @dev Closely (but not quite, see {TransferrableOwnership}) implements [ERC-173](https://eips.ethereum.org/EIPS/eip-173)\r\n */\r\nabstract contract Ownable is Context, ERC165, IOwnable {\r\n\taddress private _owner;\r\n\r\n\t/// @dev Initializes the contract setting the deployer as the initial owner.\r\n\tconstructor() { _transferOwnership(_msgSender()); }\r\n\r\n\t/// @dev Throws if called by any account other than the owner.\r\n\tmodifier onlyOwner() {\r\n\t\tif (owner() != _msgSender()) {\r\n\t\t\trevert CallerIsNotOwner(_msgSender(), owner());\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev Transfers ownership of the contract to a new account (`newOwner`)\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = owner();\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, owner());\r\n\t}\r\n\r\n\t/// @inheritdoc IOwnable\r\n\tfunction owner() public view returns (address) { return _owner; }\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n\t\treturn interfaceId == type(IOwnable).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/Recoverable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./RecoverableEther.sol\";\r\nimport \"./RecoverableTokens.sol\";\r\n\r\nabstract contract Recoverable is RecoverableEther, RecoverableTokens {\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(RecoverableEther, RecoverableTokens) returns (bool) {\r\n\t\treturn RecoverableEther.supportsInterface(interfaceId) || \r\n\t\t\tRecoverableTokens.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/RecoverableEther.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IRecoverableEther.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @title The abstract Recoverable Ether contract\r\n * @author Twifag\r\n */\r\nabstract contract RecoverableEther is Ownable, IRecoverableEther {\r\n\t// @inheritdoc IRecoverableEther\r\n\tfunction __recoverEther() public virtual override payable onlyOwner {\r\n\t\t(bool success, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n\r\n\t\tif (!success) {\r\n\t\t\trevert FailedSend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Ownable) returns (bool) {\r\n\t\treturn interfaceId == type(IRecoverableEther).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/RecoverableTokens.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IRecoverableTokens.sol\";\r\nimport \"./libraries/Token.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @title The abstract Recoverable Tokens contract\r\n * @author Twifag\r\n */\r\nabstract contract RecoverableTokens is Ownable, IRecoverableTokens {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Recovers ERC1155 tokens accidentally sent to this contract\r\n\t * @param token to recover\r\n\t * @param tokenId to recover\r\n\t */\r\n\tfunction __recoverERC1155(IERC1155 token, uint256 tokenId) internal {\r\n\t\tuint256 balance = token.balanceOf(address(this), tokenId);\r\n\t\ttoken.safeTransferFrom(address(this), payable(owner()), tokenId, balance, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Recovers ERC20 tokens accidentally sent to this contract\r\n\t * @param token to recover\r\n\t */\r\n\tfunction __recoverERC20(IERC20 token) internal {\r\n\t\tuint256 balance = token.balanceOf(address(this));\r\n\t\ttoken.safeTransfer(payable(owner()), balance);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Recovers ERC721 tokens accidentally sent to this contract\r\n\t * @param token to recover\r\n\t * @param tokenId to recover\r\n\t */\r\n\tfunction __recoverERC721(IERC721 token, uint256 tokenId) internal { token.safeTransferFrom(address(this), payable(owner()), tokenId); }\r\n\r\n\t/// @inheritdoc IRecoverableTokens\r\n\tfunction __recoverTokens(Token.Type tokenType, address tokenContract, uint256 tokenId) public virtual onlyOwner {\r\n\t\tif (tokenType == Token.Type.ERC1155) {\r\n\t\t\t__recoverERC1155(IERC1155(tokenContract), tokenId);\r\n\t\t} else if (tokenType == Token.Type.ERC20) {\r\n\t\t\t__recoverERC20(IERC20(tokenContract));\r\n\t\t} else if (tokenType == Token.Type.ERC721) {\r\n\t\t\t__recoverERC721(IERC721(tokenContract), tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Ownable) returns (bool) {\r\n\t\treturn interfaceId == type(IRecoverableTokens).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\ncontract TestERC721 is Ownable, ERC721 {\r\n\tconstructor() ERC721(\"Test ERC721 Token\", \"TestERC721\") {\r\n\t\tfor (uint i = 0; i < 10; i++) {\r\n\t\t\t_safeMint(payable(owner()), i);\r\n\t\t}\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract TestERC20 is Ownable, ERC20 {\r\n\tconstructor() ERC20(\"Test ERC20 Token\", \"Test\\\\ERC<20\") { _mint(payable(owner()), 1000 ether); }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/OwnershipTransferrable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IOwnershipTransferrable.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\nabstract contract OwnershipTransferrable is Ownable, IOwnershipTransferrable {\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Ownable) returns (bool) {\r\n\t\treturn interfaceId == type(IOwnershipTransferrable).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\t/// @inheritdoc IOwnershipTransferrable\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner { _transferOwnership(newOwner); }\r\n}"
    },
    "contracts/MarebitsVault.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IMarebitsVault.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./libraries/Token.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./RecoverableEther.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title The implementation for the Mare Bits Vault\r\n * @author Twifag\r\n */\r\ncontract MarebitsVault is ERC1155Holder, ERC721Holder, KnowsBestPony, RecoverableEther, IMarebitsVault {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/// @inheritdoc IMarebitsVault\r\n\tfunction __transfer(Token.Type tokenType, address tokenContract, address payable to, uint256 tokenId, uint256 amount) external onlyOwner {\r\n\t\tif (tokenType == Token.Type.ERC1155) {\r\n\t\t\t_transferERC1155(IERC1155(tokenContract), to, tokenId, amount);\r\n\t\t} else if (tokenType == Token.Type.ERC20) {\r\n\t\t\t_transferERC20(IERC20(tokenContract), to, amount);\r\n\t\t} else if (tokenType == Token.Type.ERC721) {\r\n\t\t\t_transferERC721(IERC721(tokenContract), to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ERC1155 tokens out of this contract and to the original owner\r\n\t * @param token to be transferred\r\n\t * @param to wallet address\r\n\t * @param tokenId of the token to be transferred\r\n\t * @param amount of tokens to be transferred\r\n\t */\r\n\tfunction _transferERC1155(IERC1155 token, address payable to, uint256 tokenId, uint256 amount) private { token.safeTransferFrom(address(this), to, tokenId, amount, \"\"); }\r\n\r\n\t/**\r\n\t * @dev Transfers ERC20 tokens out of this contract and to the original owner\r\n\t * @param token to be transferred\r\n\t * @param to wallet address\r\n\t * @param amount of tokens to be transferred\r\n\t */\r\n\tfunction _transferERC20(IERC20 token, address payable to, uint256 amount) private { token.safeTransfer(to, amount); }\r\n\r\n\t/**\r\n\t * @dev Transfers ERC721 tokens out of this contract and to the original owner\r\n\t * @param token to be transferred\r\n\t * @param to wallet address\r\n\t * @param tokenId of the token to be transferred\r\n\t */\r\n\tfunction _transferERC721(IERC721 token, address payable to, uint256 tokenId) private { token.safeTransferFrom(address(this), to, tokenId); }\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Receiver, IERC165, RecoverableEther) returns (bool) {\r\n\t\treturn interfaceId == type(IERC721Receiver).interfaceId || \r\n\t\t\tinterfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(RecoverableEther).interfaceId || \r\n\t\t\tERC1155Receiver.supportsInterface(interfaceId) || \r\n\t\t\tRecoverableEther.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/MarebitsLocker.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IMarebitsLocker.sol\";\r\nimport \"./interfaces/IMarebitsLockerAccount.sol\";\r\nimport \"./interfaces/IMarebitsLockerToken.sol\";\r\nimport \"./interfaces/IMarebitsVault.sol\";\r\nimport \"./interfaces/IRecoverableEther.sol\";\r\nimport \"./interfaces/IRecoverableTokens.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./libraries/Account.sol\";\r\nimport \"./libraries/Token.sol\";\r\nimport \"./MarebitsLockerAccount.sol\";\r\nimport \"./MarebitsLockerToken.sol\";\r\nimport \"./MarebitsVault.sol\";\r\nimport \"./Recoverable.sol\";\r\nimport \"./OwnershipTransferrable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"marebits/contracts/MareBits.sol\";\r\n\r\n/**\r\n * @title The implementation for the Mare Bits Locker\r\n * @author Twifag\r\n */\r\ncontract MarebitsLocker is OwnershipTransferrable, Recoverable, KnowsBestPony, ReentrancyGuard, IMarebitsLocker {\r\n\tusing SafeERC20 for IERC20;\r\n\tusing Token for Token.Type;\r\n\r\n\t/** @dev the maximum value for time */\r\n\tuint64 private constant MAXIMUM_TIME = (2 << 63) - 1;\r\n\r\n\t/// @dev {IMarebitsLockerAccount} associated with this {IMarebitsLocker}\r\n\tIMarebitsLockerAccount public immutable accounts;\r\n\r\n\t/// @dev {IMarebitsLockerToken} associated with this {IMarebitsLocker}\r\n\tIMarebitsLockerToken public immutable lockerToken;\r\n\r\n\t/** @dev Address of the Mare Bits Token contract */\r\n\t// ganache 0xC9E6fEeB2B02566D98e083324127d9f2288b95b1\r\n\t// ropsten 0x35c94a5a563d7dc00b7edaa455e0a931691deb27\r\n\t// mainnet 0xc5a1973e1f736e2ad991573f3649f4f4a44c3028\r\n\tMareBits private constant mareBitsToken = MareBits(address(0x35c94a5A563d7dc00b7eDaa455e0a931691DEB27));\r\n\r\n\t/// @dev {IMarebitsVault} associated with this {IMarebitsLocker}\r\n\tIMarebitsVault public immutable vault;\r\n\r\n\t/**\r\n\t * @dev Must pass a non-zero amount\r\n\t * @param amount that must be greater than zero\r\n\t */\r\n\tmodifier nonZeroAmount(uint256 amount) {\r\n\t\tif (amount == 0) {\r\n\t\t\trevert ZeroAmountGiven();\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction balanceTest(address wallet) public view returns (uint256) { return mareBitsToken.balanceOf(wallet); }\r\n\r\n\t/** @dev Only humans can interact */\r\n\tmodifier onlyHuman() {\r\n\t\taddress account = _msgSender();\r\n\t\tuint256 size;\r\n\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\r\n\t\tif (size > 0) {\r\n\t\t\trevert InvalidCaller();\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/** @dev Caller must have $MARE to interact with this locker */\r\n\tmodifier mareHodlerOnly() {\r\n\t\tif (address(mareBitsToken) != address(0) && mareBitsToken.balanceOf(_msgSender()) == 0) {\r\n\t\t\trevert NeedsMoreMARE(_msgSender());\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @param name of the {MarebitsLockerToken}\r\n\t * @param symbol of the {MarebitsLockerToken}\r\n\t * @param baseURI initially set for the {MarebitsLockerToken}\r\n\t */\r\n\tconstructor(string memory name, string memory symbol, string memory baseURI) {\r\n\t\taccounts = new MarebitsLockerAccount();\r\n\t\tlockerToken = new MarebitsLockerToken(name, symbol, baseURI);\r\n\t\tvault = new MarebitsVault();\r\n\t}\r\n\r\n\t/** @notice In the case of child contracts somehow receiving ether, this lets us recover it from them.  Do not send ether to any of these contracts, please! */\r\n\treceive() external payable {}\r\n\r\n\t/// @inheritdoc IMarebitsLocker\r\n\tfunction __burn(uint256 accountId) external {\r\n\t\tif (_msgSender() != address(lockerToken)) {\r\n\t\t\trevert InvalidCaller();\r\n\t\t}\r\n\t\taccounts.__burn(accountId);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Recovers ether accidentally sent to this contract or the contracts owned by this one ({MarebitsLockerAccount}, {MarebitsLockerToken}, and {MarebitsVault})\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @inheritdoc RecoverableEther\r\n\t */\r\n\tfunction __recoverEther() public override(IRecoverableEther, RecoverableEther) payable onlyOwner {\r\n\t\taccounts.__recoverEther();\r\n\t\tlockerToken.__recoverEther();\r\n\t\tvault.__recoverEther();\r\n\t\tsuper.__recoverEther();\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Recovers ERC20, ERC721, or ERC1155 tokens accidentally sent to this contract or the non-vault contracts owned by this one ({MarebitsLockerAccount} and {MarebitsLockerToken})\r\n\t * @dev Only callable by the {Ownable.owner} of this contract\r\n\t * @inheritdoc RecoverableTokens\r\n\t */\r\n\tfunction __recoverTokens(Token.Type tokenType, address tokenContract, uint256 tokenId) public override(IRecoverableTokens, RecoverableTokens) onlyOwner {\r\n\t\taccounts.__recoverTokens(tokenType, tokenContract, tokenId);\r\n\t\tlockerToken.__recoverTokens(tokenType, tokenContract, tokenId);\r\n\t\tsuper.__recoverTokens(tokenType, tokenContract, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if an account exists and reverts if it does not\r\n\t * @param accountId for account to check\r\n\t */\r\n\tfunction _checkAccountExists(uint256 accountId) private view {\r\n\t\tif (!lockerToken.__exists(accountId)) {\r\n\t\t\trevert NonexistentAccount(accountId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if approval has been received to transfer a token and reverts if not\r\n\t * @param isApproved is true when approval has been received; otherwise, false\r\n\t * @param tokenAddress of the token for which approval is being requested to transfer\r\n\t * @param approvalFunction that needs to be called in order to grant approval\r\n\t */\r\n\tfunction _checkApproval(bool isApproved, address tokenAddress, string memory approvalFunction) private pure {\r\n\t\tif (!isApproved) {\r\n\t\t\trevert UnapprovedTokenTransfer(tokenAddress, approvalFunction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the token is owned by the address `claimedOwner` and reverts if not\r\n\t * @param tokenId of the token to check\r\n\t * @param claimedOwner address that is claiming ownership of the token\r\n\t * @param actualOwner address of the actual owner of the token\r\n\t */\r\n\tfunction _checkOwner(uint256 tokenId, address claimedOwner, address actualOwner) private pure {\r\n\t\tif (claimedOwner != actualOwner) {\r\n\t\t\trevert NotTokenOwner(tokenId, claimedOwner, actualOwner);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if there is sufficient balance and reverts if not\r\n\t * @param required balance\r\n\t * @param available balance\r\n\t */\r\n\tfunction _checkSufficientBalance(uint256 required, uint256 available) private pure {\r\n\t\tif (required > available) {\r\n\t\t\trevert InsufficientBalance(required, available);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the time `given` falls within the bounds of `maximum` and `minimum` and reverts if not\r\n\t * @param given time (in seconds since UNIX epoch)\r\n\t * @param minimum time bound (in seconds since UNIX epoch)\r\n\t * @param maximum time bound (in seconds since UNIX epoch)\r\n\t */\r\n\tfunction _checkTimeBounds(uint64 given, uint64 minimum, uint64 maximum) private pure {\r\n\t\tif (given < minimum || given > maximum) {\r\n\t\t\trevert TimeOutOfBounds(given, minimum, maximum);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the given token type is valid and reverts if not\r\n\t * @param tokenType to check\r\n\t */\r\n\tfunction _checkTokenType(Token.Type tokenType) private pure {\r\n\t\tif (!tokenType.isValid()) {\r\n\t\t\trevert InvalidTokenType(tokenType);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Gets a new `accountId` and creates a new {MarebitsLockerAccount}\r\n\t * @param amount of tokens to lock in locker\r\n\t * @param tokenContract for the token to be locked\r\n\t * @param tokenId of the token to be locked; should always be 0 for locked ERC20 tokens\r\n\t * @param tokenType of token to be locked; see {Token.Type}\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t * @return accountId for the newly created account\r\n\t */\r\n\tfunction _createAccount(uint256 amount, address tokenContract, uint256 tokenId, Token.Type tokenType, uint64 unlockTime) private returns (uint256 accountId) {\r\n\t\tif (tokenType == Token.Type.ERC721 && amount > 1) {\r\n\t\t\trevert InvalidAmount(\"`amount` must be 1 for ERC721\");\r\n\t\t}\r\n\t\taccountId = lockerToken.__getNextTokenId();\r\n\t\taccounts.__createAccount(accountId, amount, tokenContract, tokenId, tokenType, unlockTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Issues a new token by calling {MarebitsLockerToken#__issueToken}\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t */\r\n\tfunction _issueToken(uint256 accountId) private { lockerToken.__issueToken(payable(_msgSender()), accountId); }\r\n\r\n\t/**\r\n\t * @dev Locks ERC1155 tokens in a Mare Bits Locker and issues a redeemable Mare Bits Locker Token that can be used to unlock the tokens after the time `unlockTime` has passed\r\n\t * @param token to be locked\r\n\t * @param tokenId of the token to be locked\r\n\t * @param amount of tokens to lock in locker\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t * @return accountId (also `tokenId`) representing the locked account\r\n\t */\r\n\tfunction _lockERC1155(IERC1155 token, uint256 tokenId, uint256 amount, uint64 unlockTime) private nonZeroAmount(amount) returns (uint256 accountId) {\r\n\t\t_checkSufficientBalance(amount, token.balanceOf(_msgSender(), tokenId));\r\n\t\t_checkApproval(token.isApprovedForAll(_msgSender(), address(this)), address(token), \"setApprovalForAll()\");\r\n\t\taccountId = _createAccount(amount, address(token), tokenId, Token.Type.ERC1155, unlockTime);\r\n\t\ttoken.safeTransferFrom(_msgSender(), payable(address(vault)), tokenId, amount, \"\");\r\n\t\t_issueToken(accountId);\r\n\t\temit TokensLocked(accountId, _msgSender(), amount, address(token), tokenId, Token.Type.ERC1155, unlockTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Locks ERC20 tokens in a Mare Bits Locker and issues a redeemable Mare Bits Locker Token that can be used to unlock the tokens after the time `unlockTime` has passed\r\n\t * @param token to be locked\r\n\t * @param amount of tokens to lock in locker\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t * @return accountId (also `tokenId`) representing the locked account\r\n\t */\r\n\tfunction _lockERC20(IERC20 token, uint256 amount, uint64 unlockTime) private nonZeroAmount(amount) returns (uint256 accountId) {\r\n\t\t_checkSufficientBalance(amount, token.balanceOf(_msgSender()));\r\n\t\t_checkApproval(token.allowance(_msgSender(), address(this)) >= amount, address(token), \"approve()\");\r\n\t\taccountId = _createAccount(amount, address(token), 0, Token.Type.ERC20, unlockTime);\r\n\t\ttoken.safeTransferFrom(_msgSender(), payable(address(vault)), amount);\r\n\t\t_issueToken(accountId);\r\n\t\temit TokensLocked(accountId, _msgSender(), amount, address(token), 0, Token.Type.ERC20, unlockTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Locks ERC721 tokens in a Mare Bits Locker and issues a redeemable Mare Bits Locker Token that can be used to unlock the tokens after the time `unlockTime` has passed\r\n\t * @param token to be locked\r\n\t * @param tokenId of the token to be locked\r\n\t * @param unlockTime after which locked tokens can be withdrawn (in seconds after UNIX epoch)\r\n\t * @return accountId (also `tokenId`) representing the locked account\r\n\t */\r\n\tfunction _lockERC721(IERC721 token, uint256 tokenId, uint64 unlockTime) private returns (uint256 accountId) {\r\n\t\t_checkOwner(tokenId, _msgSender(), token.ownerOf(tokenId));\r\n\t\t_checkApproval(token.getApproved(tokenId) == address(this), address(token), \"approve()\");\r\n\t\taccountId = _createAccount(1, address(token), tokenId, Token.Type.ERC721, unlockTime);\r\n\t\ttoken.safeTransferFrom(_msgSender(), payable(address(vault)), tokenId);\r\n\t\t_issueToken(accountId);\r\n\t\temit TokensLocked(accountId, _msgSender(), 1, address(token), tokenId, Token.Type.ERC721, unlockTime);\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLocker\r\n\tfunction extendLock(uint256 accountId, uint64 unlockTime) external nonReentrant onlyHuman mareHodlerOnly returns (uint256) {\r\n\t\t_checkAccountExists(accountId);\r\n\t\t_checkOwner(accountId, _msgSender(), lockerToken.ownerOf(accountId));\r\n\t\tAccount.Info memory account = accounts.getAccount(accountId);\r\n\t\t_checkTimeBounds(unlockTime, account.unlockTime, MAXIMUM_TIME);\r\n\t\taccounts.__setUnlockTime(accountId, unlockTime);\r\n\t\temit TokensLocked(accountId, _msgSender(), account.amount, account.tokenContract, account.tokenId, account.tokenType, unlockTime);\r\n\t\treturn accountId;\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLocker\r\n\tfunction getAccount(uint256 accountId) external view returns (Account.Info memory) { return accounts.getAccount(accountId); }\r\n\r\n\t/// @inheritdoc IMarebitsLocker\r\n\tfunction lockTokens(Token.Type tokenType, address tokenContract, uint256 tokenId, uint256 amount, uint64 unlockTime) external nonReentrant onlyHuman mareHodlerOnly returns (uint256) {\r\n\t\t_checkTokenType(tokenType);\r\n\t\t_checkTimeBounds(unlockTime, uint64(block.timestamp), MAXIMUM_TIME);\r\n\r\n\t\tif (tokenType == Token.Type.ERC1155) {\r\n\t\t\treturn _lockERC1155(IERC1155(tokenContract), tokenId, amount, unlockTime);\r\n\t\t} else if (tokenType == Token.Type.ERC20) {\r\n\t\t\treturn _lockERC20(IERC20(tokenContract), amount, unlockTime);\r\n\t\t} else if (tokenType == Token.Type.ERC721) {\r\n\t\t\treturn _lockERC721(IERC721(tokenContract), tokenId, unlockTime);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLocker\r\n\tfunction redeemToken(uint256 accountId) external nonReentrant onlyHuman mareHodlerOnly {\r\n\t\tAccount.Info memory account = accounts.getAccount(accountId);\r\n\r\n\t\tif (uint256(account.unlockTime) > block.timestamp) {\r\n\t\t\trevert LockedAccount(account.unlockTime, uint64(block.timestamp));\r\n\t\t}\r\n\t\t_checkAccountExists(accountId);\r\n\t\t_checkOwner(accountId, _msgSender(), lockerToken.ownerOf(accountId));\r\n\t\t_checkSufficientBalance(1, account.amount);\r\n\t\taccounts.__redeem(accountId);\r\n\t\tlockerToken.__burn(accountId);\r\n\t\tvault.__transfer(account.tokenType, account.tokenContract, payable(_msgSender()), account.tokenId, account.amount);\r\n\t\temit TokenRedeemed(accountId, _msgSender(), account.amount, account.tokenContract, account.tokenId, account.tokenType);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, OwnershipTransferrable, Recoverable) returns (bool) {\r\n\t\treturn interfaceId == type(IMarebitsLocker).interfaceId || \r\n\t\t\tinterfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tOwnershipTransferrable.supportsInterface(interfaceId) || \r\n\t\t\tRecoverable.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/MarebitsLockerAccount.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/IMarebitsLockerAccount.sol\";\r\nimport \"./libraries/Account.sol\";\r\nimport \"./libraries/Token.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Recoverable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title The implementation for the Mare Bits Locker Account\r\n * @author Twifag\r\n */\r\ncontract MarebitsLockerAccount is Recoverable, KnowsBestPony, IMarebitsLockerAccount {\r\n\tusing Account for mapping(uint256 => Account.Info);\r\n\tusing Account for Account.Info;\r\n\r\n\t/** @dev the maximum value for time (uint64) */\r\n\tuint64 private constant MAXIMUM_TIME = (2 << 63) - 1;\r\n\r\n\t/** @dev Stores all the accounts; `accountId` => {IMarebitsLockerAccount.Account} */\r\n\tmapping(uint256 => Account.Info) private _accounts;\r\n\r\n\t/**\r\n\t * @dev The account must exist\r\n\t * @param accountId (also `tokenId`) representing the locked account\r\n\t */\r\n\tmodifier accountExists(uint256 accountId) {\r\n\t\tif (!_accounts[accountId].isDefined()) {\r\n\t\t\trevert NonexistentAccount(accountId);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLockerAccount\r\n\tfunction __createAccount(uint256 accountId, uint256 amount, address tokenContract, uint256 tokenId, Token.Type tokenType, uint64 unlockTime) public onlyOwner {\r\n\t\t_accounts.create(accountId, amount, tokenContract, tokenId, tokenType, unlockTime);\r\n\t}\r\n\r\n\t/// @inheritdoc IMarebitsLockerAccount\r\n\tfunction __burn(uint256 accountId) external onlyOwner accountExists(accountId) { _accounts[accountId].burn(); }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\tfunction __redeem(uint256 accountId) external onlyOwner accountExists(accountId) { _accounts[accountId].redeem(); }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function __setAmount(uint256 accountId, uint256 amount) external onlyOwner accountExists(accountId) { _accounts[accountId].setAmount(amount); }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\tfunction __setUnlockTime(uint256 accountId, uint64 unlockTime) external onlyOwner accountExists(accountId) { _accounts[accountId].setUnlockTime(unlockTime); }\r\n\r\n\t/// @inheritdoc IMarebitsLockerAccount\r\n\tfunction getAccount(uint256 accountId) external view accountExists(accountId) returns (Account.Info memory) { return _accounts[accountId]; }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function getAmount(uint256 accountId) external view accountExists(accountId) returns (uint256) { return _accounts[accountId].amount; }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function getTokenContract(uint256 accountId) external view accountExists(accountId) returns (address) { return _accounts[accountId].tokenContract; }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function getTokenType(uint256 accountId) external view accountExists(accountId) returns (Token.Type) { return _accounts[accountId].tokenType; }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function getTokenId(uint256 accountId) external view accountExists(accountId) returns (uint256) { return _accounts[accountId].tokenId; }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function getUnlockTime(uint256 accountId) external view accountExists(accountId) returns (uint64) { return _accounts[accountId].unlockTime; }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function hasAccount(uint256 accountId) external view returns (bool) { return _accounts[accountId].isDefined(); }\r\n\r\n\t// /// @inheritdoc IMarebitsLockerAccount\r\n\t// function isUnlocked(uint256 accountId) external view accountExists(accountId) returns (bool) { return _accounts[accountId].isUnlocked(); }\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @inheritdoc ERC165\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Recoverable) returns (bool) {\r\n\t\treturn interfaceId == type(IMarebitsLockerAccount).interfaceId || \r\n\t\t\tinterfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(Recoverable).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "marebits/contracts/MareBits.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract MareBits is OwnableUpgradeable, ERC20Upgradeable {\n        function initialize(string memory name, string memory symbol, uint256 initialSupply, address owner) public virtual initializer {\n                __MareBitsFixedSupply_init(name, symbol, initialSupply, owner);\n        }\n\n        function __MareBitsFixedSupply_init(string memory name, string memory symbol, uint256 initialSupply, address owner) internal initializer {\n                __Context_init_unchained();\n                __Ownable_init_unchained();\n                __ERC20_init_unchained(name, symbol);\n                __MareBits_init_unchained(name, symbol, initialSupply, owner);\n        }\n\n        function __MareBits_init_unchained(string memory name, string memory symbol, uint256 initialSupply, address owner) internal initializer {\n                _mint(owner, initialSupply);\n        }\n        uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/TestERC1155.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\ncontract TestERC1155 is Ownable, ERC1155 {\r\n\tconstructor() ERC1155(\"https://mare.biz/test/\") {\r\n\t\tfor (uint i = 0; i < 10; i++) {\r\n\t\t\t_mint(payable(owner()), i + 1, 1, \"\");\r\n\t\t}\r\n\t\t_mint(payable(owner()), 0, 1000 ether, \"\");\r\n\t}\r\n}"
    },
    "contracts/libraries/Bools.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL AND LicenseRef-NIGGER\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @title Bools library, overrides for the bool type\r\n * @author Twifan\r\n */\r\nlibrary Bools {\r\n\t/**\r\n\t * @notice Converts a bool to a bytes5 value\r\n\t * @param self the bool to convert\r\n\t * @return bytes5 converted value of the bool\r\n\t */\r\n\tfunction toBytes(bool self) internal pure returns (bytes5) { return self ? bytes5(\"true\") : bytes5(\"false\"); }\r\n\r\n\t/**\r\n\t * @notice Converts a bool to a string value\r\n\t * @param self the bool to convert\r\n\t * @return string converted value of the bool\r\n\t */\r\n\tfunction toString(bool self) internal pure returns (string memory) { return self ? \"true\" : \"false\"; }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200,
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "peephole": true,
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}