{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IMarebitsLocker.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IMarebitsLockerAccount.sol\";\r\nimport \"./ITokenTypeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\ninterface IMarebitsLocker is IERC165, ITokenTypeable {\r\n\tevent TokensLocked(uint256 indexed accountId, address indexed owner, uint256 amount, address tokenContract, uint256 tokenId, TokenType tokenType, uint256 unlockTime);\r\n\tevent TokensRedeemed(uint256 indexed accountId, address indexed owner, uint256 amount, address tokenContract, uint256 tokenId, TokenType tokenType);\r\n\t\r\n\tfunction extendLock(uint256 accountId, uint256 unlockTime) external;\r\n\tfunction getAccount(uint256 accountId) external view returns (IMarebitsLockerAccount.Account memory);\r\n\tfunction lockTokens(TokenType tokenType, address tokenContract, uint256 tokenId, uint256 amount, uint256 unlockTime) external returns (uint256);\r\n\tfunction redeemToken(uint256 accountId) external;\r\n}"
    },
    "contracts/interfaces/IMarebitsLockerAccount.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ITokenTypeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\ninterface IMarebitsLockerAccount is IERC165, ITokenTypeable {\r\n\tstruct Account {\r\n\t\tuint256 amount;\r\n\t\tstring metadata;\r\n\t\taddress tokenContract;\r\n\t\tuint256 tokenId;\r\n\t\tTokenType tokenType;\r\n\t\tstring tokenUri;\r\n\t\tuint256 unlockTime;\r\n\t}\r\n\r\n\tfunction getAccount(uint256 accountId) external view returns (Account memory);\r\n\tfunction getAmount(uint256 accountId) external view returns (uint256);\r\n\tfunction getMetadata(uint256 accountId) external view returns (string memory);\r\n\tfunction getTokenContract(uint256 accountId) external view returns (address);\r\n\tfunction getTokenType(uint256 accountId) external view returns (TokenType);\r\n\tfunction getTokenId(uint256 accountId) external view returns (uint256);\r\n\tfunction getTokenUri(uint256 accountId) external view returns (string memory);\r\n\tfunction getUnlockTime(uint256 accountId) external view returns (uint256);\r\n\tfunction isUnlocked(uint256 accountId) external view returns (bool);\r\n}"
    },
    "contracts/interfaces/ITokenTypeable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITokenTypeable { enum TokenType { UNDEFINED, ERC1155, ERC20, ERC721 } }"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/MarebitsLocker.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IMarebitsLocker.sol\";\r\nimport \"./interfaces/IMarebitsLockerAccount.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./MarebitsLockerAccount.sol\";\r\nimport \"./MarebitsLockerToken.sol\";\r\nimport \"./MarebitsVault.sol\";\r\nimport \"./RecoverableEther.sol\";\r\nimport \"./RecoverableTokens.sol\";\r\nimport \"./TokenTypeable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\ncontract MarebitsLocker is ERC165, TokenTypeable, RecoverableEther, RecoverableTokens, KnowsBestPony, ReentrancyGuard, IMarebitsLocker {\r\n\tusing Address for address;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// account handler\r\n\tMarebitsLockerAccount private _lockerAccount;\r\n\r\n\t// issued locker token contract\r\n\tMarebitsLockerToken private _lockerToken;\r\n\r\n\t// vault where all tokens (ERC20 and ERC721) are held in escrow while locked\r\n\tMarebitsVault private _vault;\r\n\r\n\t/**\r\n\t * @dev Only humans can interact\r\n\t */\r\n\tmodifier onlyHuman() {\r\n\t\trequire(!_msgSender().isContract(), \"Caller cannot be a smart contract\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(string memory name, string memory symbol, string memory baseURI) {\r\n\t\t_lockerAccount = new MarebitsLockerAccount();\r\n\t\t_lockerToken = new MarebitsLockerToken(name, symbol, baseURI);\r\n\t\t_vault = new MarebitsVault();\r\n\t}\r\n\r\n\tfunction __recoverEther() public override(RecoverableEther) payable onlyOwner {\r\n\t\t_lockerAccount.__recoverEther();\r\n\t\t_lockerToken.__recoverEther();\r\n\t\t_vault.__recoverEther();\r\n\t\tsuper.__recoverEther();\r\n\t}\r\n\r\n\tfunction __recoverTokens(TokenType tokenType, address tokenContract, uint256 tokenId) public override(RecoverableTokens) onlyOwner {\r\n\t\t_lockerAccount.__recoverTokens(tokenType, tokenContract, tokenId);\r\n\t\t_lockerToken.__recoverTokens(tokenType, tokenContract, tokenId);\r\n\t\tsuper.__recoverTokens(tokenType, tokenContract, tokenId);\r\n\t}\r\n\r\n\tfunction __setBaseURI(string calldata baseURI) external onlyOwner { _lockerToken.__setBaseURI(baseURI); }\r\n\r\n\tfunction __setTokenURI(uint256 tokenId, string calldata tokenUri) external onlyOwner { _lockerToken.__setTokenURI(tokenId, tokenUri); }\r\n\t\r\n\tfunction _createAccount(uint256 amount, address tokenContract, uint256 tokenId, TokenType tokenType, uint256 unlockTime) private returns (uint256 accountId) {\r\n\t\taccountId = _lockerToken.__getNextTokenId();\r\n\t\t_lockerAccount.__createAccount(accountId, amount, tokenContract, tokenId, tokenType, unlockTime);\r\n\t}\r\n\r\n\tfunction _lockERC1155(IERC1155 token, uint256 tokenId, uint256 amount, uint256 unlockTime) private returns (uint256 accountId) {\r\n\t\trequire(amount > 0, \"`amount` must be > 0\");\r\n\t\trequire(token.balanceOf(_msgSender(), tokenId) >= amount, \"`amount` must be <= total token balance\");\r\n\t\trequire(token.isApprovedForAll(_msgSender(), address(this)), \"Not approved, you must call `token.setApprovalForAll()`\");\r\n\t\taccountId = _createAccount(amount, address(token), tokenId, TokenType.ERC1155, unlockTime);\r\n\t\ttoken.safeTransferFrom(_msgSender(), payable(address(_vault)), tokenId, amount, \"\");\r\n\t\t_lockerToken.__issueToken(payable(_msgSender()), accountId, _lockerAccount.getTokenUri(accountId));\r\n\t\temit TokensLocked(accountId, _msgSender(), amount, address(token), tokenId, TokenType.ERC1155, unlockTime);\r\n\t}\r\n\r\n\tfunction _lockERC20(IERC20 token, uint256 amount, uint256 unlockTime) private returns (uint256 accountId) {\r\n\t\trequire(amount > 0, \"`amount` must be > 0\");\r\n\t\trequire(token.balanceOf(_msgSender()) >= amount, \"`amount` must be <= total token balance\");\r\n\t\trequire(token.allowance(_msgSender(), address(this)) >= amount, \"Not approved, you must call `token.approve()`\");\r\n\t\taccountId = _createAccount(amount, address(token), 0, TokenType.ERC20, unlockTime);\r\n\t\ttoken.safeTransferFrom(_msgSender(), payable(address(_vault)), amount);\r\n\t\t_lockerToken.__issueToken(payable(_msgSender()), accountId, _lockerAccount.getTokenUri(accountId));\r\n\t\temit TokensLocked(accountId, _msgSender(), amount, address(token), 0, TokenType.ERC20, unlockTime);\r\n\t}\r\n\r\n\tfunction _lockERC721(IERC721 token, uint256 tokenId, uint256 unlockTime) private returns (uint256 accountId) {\r\n\t\trequire(token.ownerOf(tokenId) == _msgSender(), \"`tokenId` not owned by caller\");\r\n\t\trequire(token.getApproved(tokenId) == address(this), \"Not approved, you must call `token.approve()`\");\r\n\t\taccountId = _createAccount(1, address(token), tokenId, TokenType.ERC721, unlockTime);\r\n\t\ttoken.safeTransferFrom(_msgSender(), payable(address(_vault)), tokenId);\r\n\t\t_lockerToken.__issueToken(payable(_msgSender()), accountId, _lockerAccount.getTokenUri(accountId));\r\n\t\temit TokensLocked(accountId, _msgSender(), 1, address(token), tokenId, TokenType.ERC721, unlockTime);\r\n\t}\r\n\r\n\tfunction extendLock(uint256 accountId, uint256 unlockTime) external onlyHuman {\r\n\t\trequire(_lockerToken.__exists(accountId), \"Token for `accountId` does not exist\");\r\n\t\trequire(_lockerToken.ownerOf(accountId) == _msgSender(), \"Not the owner of this `accountId`\");\r\n\t\trequire(unlockTime > _lockerAccount.getUnlockTime(accountId), \"New `unlockTime` must be > the existing `unlockTime`\");\r\n\t\t_lockerAccount.__setUnlockTime(accountId, unlockTime);\r\n\t\temit TokensLocked(accountId, _msgSender(), _lockerAccount.getAmount(accountId), _lockerAccount.getTokenContract(accountId), _lockerAccount.getTokenId(accountId), _lockerAccount.getTokenType(accountId), unlockTime);\r\n\t}\r\n\r\n\tfunction getAccount(uint256 accountId) external view returns (IMarebitsLockerAccount.Account memory) { return _lockerAccount.getAccount(accountId); }\r\n\r\n\tfunction lockTokens(TokenType tokenType, address tokenContract, uint256 tokenId, uint256 amount, uint256 unlockTime) external nonReentrant onlyHuman isValidTokenType(tokenType) returns (uint256) {\r\n\t\trequire(unlockTime > block.timestamp, \"`unlockTime` must be in the future\");\r\n\r\n\t\tif (tokenType == TokenType.ERC1155) {\r\n\t\t\treturn _lockERC1155(IERC1155(tokenContract), tokenId, amount, unlockTime);\r\n\t\t} else if (tokenType == TokenType.ERC20) {\r\n\t\t\treturn _lockERC20(IERC20(tokenContract), amount, unlockTime);\r\n\t\t} else if (tokenType == TokenType.ERC721) {\r\n\t\t\treturn _lockERC721(IERC721(tokenContract), tokenId, unlockTime);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction redeemToken(uint256 accountId) external nonReentrant onlyHuman {\r\n\t\trequire(_lockerToken.__exists(accountId), \"Token for `accountId` does not exist\");\r\n\t\trequire(_lockerToken.ownerOf(accountId) == _msgSender(), \"Not the owner of this `accountId`\");\r\n\t\trequire(_lockerToken.getApproved(accountId) == address(this), \"Not approved, you must call `token.approve()`\");\r\n\t\trequire(_lockerAccount.isUnlocked(accountId), \"`unlockTime` not expired\");\r\n\t\trequire(_lockerAccount.getAmount(accountId) > 0, \"Account has no balance\");\r\n\t\t_lockerAccount.__setAmount(accountId, 0);\r\n\t\t_lockerToken.__burn(accountId);\r\n\t\t_vault.__transfer(_lockerAccount.getTokenType(accountId), _lockerAccount.getTokenContract(accountId), payable(_msgSender()), _lockerAccount.getTokenId(accountId), _lockerAccount.getAmount(accountId));\r\n\t\temit TokensRedeemed(accountId, _msgSender(), _lockerAccount.getAmount(accountId), _lockerAccount.getTokenContract(accountId), _lockerAccount.getTokenId(accountId), _lockerAccount.getTokenType(accountId));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @param interfaceId to check\r\n\t* @return true if the interfaceId is supported and false if it is not\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\r\n\t\treturn interfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(Ownable).interfaceId || \r\n\t\t\tinterfaceId == type(RecoverableEther).interfaceId ||\r\n\t\t\tinterfaceId == type(RecoverableTokens).interfaceId || \r\n\t\t\tinterfaceId == type(IMarebitsLocker).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/KnowsBestPony.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract KnowsBestPony {\r\n\t/**\r\n\t * @return the best pony.\r\n\t * \r\n\t */\r\n\tfunction bestPony() public pure returns (string memory) { return \"Twilight Sparkle is the cutest, smartest, all around best pony!\"; }\r\n}"
    },
    "contracts/MarebitsLockerAccount.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IMarebitsLockerAccount.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./RecoverableEther.sol\";\r\nimport \"./RecoverableTokens.sol\";\r\nimport \"./TokenTypeable.sol\";\r\nimport \"./verifyIPFS-master/contracts/verifyIPFS.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract MarebitsLockerAccount is ERC165, TokenTypeable, RecoverableEther, RecoverableTokens, KnowsBestPony, IMarebitsLockerAccount {\r\n\tusing Strings for uint256;\r\n\r\n\tmapping(uint256 => Account) private _accounts;\r\n\r\n\tfunction __createAccount(uint256 accountId, uint256 amount, address tokenContract, uint256 tokenId, TokenType tokenType, uint256 unlockTime) public onlyOwner {\r\n\t\trequire(amount > 0, \"`amount` must be greater than 0\");\r\n\t\trequire(tokenType != TokenType.ERC721 || amount == 1, \"`amount` must be 1 for ERC721 tokens\");\r\n\t\trequire(tokenType == TokenType.ERC20 || tokenId > 0, \"`tokenId` must be specified for ERC721 or ERC1155 tokens\");\r\n\t\trequire(unlockTime > block.timestamp, \"`unlockTime` must be in the future\");\r\n\t\tAccount storage account = _accounts[accountId];\r\n\t\t(account.amount, account.tokenContract, account.tokenId, account.tokenType, account.unlockTime) = (amount, tokenContract, tokenId, tokenType, unlockTime);\r\n\t\t_generateMetadata(account);\r\n\t}\r\n\r\n\tfunction __setAmount(uint256 accountId, uint256 amount) external onlyOwner {\r\n\t\t_accounts[accountId].amount = amount;\r\n\t\t_generateMetadata(_accounts[accountId]);\r\n\t}\r\n\r\n\tfunction __setUnlockTime(uint256 accountId, uint256 unlockTime) external onlyOwner {\r\n\t\t_accounts[accountId].unlockTime = unlockTime;\r\n\t\t_generateMetadata(_accounts[accountId]);\r\n\t}\r\n\r\n\tfunction _generateMetadata(Account storage account) private {\r\n\t\taccount.metadata = string(abi.encodePacked('{\"description\":\"This token entitles the holder to withdraw their locked token(s) after their lock period expires from the Mare Bits Locker.\",\"external_url\":\"https://mare.biz/\",\"image\":\"https://mare.biz/marebits/icon-960.png\",\"name\":\"\\\\uD83D\\\\uDC0E\\\\u200D\\\\u2640\\\\uFE0F\\\\uD83D\\\\uDD12\\\\uD83E\\\\uDE99\",\"properties\": {\"amount\":\"', account.amount.toString(), '\",\"tokenContract\":\"', uint256(uint160(account.tokenContract)).toString(), '\",\"tokenType\":\"', (account.tokenType == TokenType.ERC1155) ? \"ERC1155\" : (account.tokenType == TokenType.ERC20) ? \"ERC20\" : (account.tokenType == TokenType.ERC721) ? \"ERC721\" : \"UNKNOWN\", '\",', (account.tokenId > 0) ? string(abi.encodePacked('\"tokenId\":\"', account.tokenId.toString(), '\",')) : \"\", '\"unlockTime\":\"', account.unlockTime.toString(), '\"}}'));\r\n\t\taccount.tokenUri = string(verifyIPFS.generateHash(account.metadata));\r\n\t}\r\n\r\n\tfunction getAccount(uint256 accountId) external view returns (Account memory) { return _accounts[accountId]; }\r\n\r\n\tfunction getAmount(uint256 accountId) external view returns (uint256) { return _accounts[accountId].amount; }\r\n\r\n\tfunction getMetadata(uint256 accountId) external view returns (string memory) { return _accounts[accountId].metadata; }\r\n\r\n\tfunction getTokenContract(uint256 accountId) external view returns (address) { return _accounts[accountId].tokenContract; }\r\n\r\n\tfunction getTokenType(uint256 accountId) external view returns (TokenType) { return _accounts[accountId].tokenType; }\r\n\r\n\tfunction getTokenId(uint256 accountId) external view returns (uint256) { return _accounts[accountId].tokenId; }\r\n\r\n\tfunction getTokenUri(uint256 accountId) external view returns (string memory) { return _accounts[accountId].tokenUri; }\r\n\r\n\tfunction getUnlockTime(uint256 accountId) external view returns (uint256) { return _accounts[accountId].unlockTime; }\r\n\r\n\tfunction isUnlocked(uint256 accountId) external view returns (bool) { return _accounts[accountId].unlockTime <= block.timestamp; }\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @param interfaceId to check\r\n\t* @return true if the interfaceId is supported and false if it is not\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\r\n\t\treturn interfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(Ownable).interfaceId || \r\n\t\t\tinterfaceId == type(RecoverableEther).interfaceId ||\r\n\t\t\tinterfaceId == type(RecoverableTokens).interfaceId || \r\n\t\t\tinterfaceId == type(IMarebitsLockerAccount).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/MarebitsLockerToken.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IMarebitsLockerToken.sol\";\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./RecoverableEther.sol\";\r\nimport \"./RecoverableTokens.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\ncontract MarebitsLockerToken is RecoverableEther, RecoverableTokens, ERC721URIStorage, KnowsBestPony, IMarebitsLockerToken {\r\n\tusing Counters for Counters.Counter;\r\n\r\n\tstring private __baseURI;\r\n\r\n\t// count tokens as they're created\r\n\tCounters.Counter private _tokenIdTracker;\r\n\r\n\tconstructor(string memory name, string memory symbol, string memory baseURI) ERC721(name, symbol) { __baseURI = baseURI; }\r\n\r\n\tfunction __burn(uint256 tokenId) external onlyOwner { _burn(tokenId); }\r\n\r\n\tfunction __exists(uint256 tokenId) external view onlyOwner returns (bool) { return _exists(tokenId); }\r\n\r\n\tfunction __getNextTokenId() external onlyOwner returns (uint256 tokenId) {\r\n\t\ttokenId = _tokenIdTracker.current();\r\n\t\t_tokenIdTracker.increment();\r\n\t}\r\n\r\n\tfunction __issueToken(address payable owner, uint256 tokenId, string memory tokenUri) external onlyOwner {\r\n\t\t_safeMint(owner, tokenId);\r\n\t\t_setTokenURI(tokenId, tokenUri);\r\n\t}\r\n\r\n\tfunction __setBaseURI(string calldata baseURI) external onlyOwner { __baseURI = baseURI; }\r\n\r\n\tfunction __setTokenURI(uint256 tokenId, string calldata tokenUri) external onlyOwner { _setTokenURI(tokenId, tokenUri); }\r\n\r\n\tfunction _baseURI() internal view override returns (string memory) { return __baseURI; }\r\n\r\n\t/**\r\n\t* @dev Burns `tokenId`. See {ERC721-_burn}.\r\n\t*/\r\n\tfunction burn(uint256 tokenId) external {\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"Not approved or owner\");\r\n\t\t_burn(tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @param interfaceId to check\r\n\t* @return true if the interfaceId is supported and false if it is not\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n\t\treturn interfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(Ownable).interfaceId || \r\n\t\t\tinterfaceId == type(RecoverableEther).interfaceId ||\r\n\t\t\tinterfaceId == type(RecoverableTokens).interfaceId || \r\n\t\t\tinterfaceId == type(ERC721URIStorage).interfaceId || \r\n\t\t\tinterfaceId == type(IMarebitsLockerToken).interfaceId || \r\n\t\t\tERC721.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/MarebitsVault.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./KnowsBestPony.sol\";\r\nimport \"./RecoverableEther.sol\";\r\nimport \"./TokenTypeable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\n\r\ncontract MarebitsVault is ERC1155Holder, ERC721Holder, KnowsBestPony, RecoverableEther, TokenTypeable {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tfunction __transfer(TokenType tokenType, address tokenContract, address payable to, uint256 tokenId, uint256 amount) external onlyOwner {\r\n\t\tif (tokenType == TokenType.ERC1155) {\r\n\t\t\t_transferERC1155(IERC1155(tokenContract), to, tokenId, amount);\r\n\t\t} else if (tokenType == TokenType.ERC20) {\r\n\t\t\t_transferERC20(IERC20(tokenContract), to, amount);\r\n\t\t} else if (tokenType == TokenType.ERC721) {\r\n\t\t\t_transferERC721(IERC721(tokenContract), to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer ERC1155 tokens to destination, used to move tokens from the vault to the owner on withdraw\r\n\t * @param token to transfer\r\n\t * @param to wallet address\r\n\t * @param amount of ERC1155 tokens to transfer\r\n\t */\r\n\tfunction _transferERC1155(IERC1155 token, address payable to, uint256 tokenId, uint256 amount) private { token.safeTransferFrom(address(this), to, tokenId, amount, \"\"); }\r\n\r\n\t/**\r\n\t * @dev Transfer ERC20 tokens to destination, used to move tokens from the vault to the owner on withdraw\r\n\t * @param token to transfer\r\n\t * @param to wallet address\r\n\t * @param amount of ERC20 tokens to transfer\r\n\t */\r\n\tfunction _transferERC20(IERC20 token, address payable to, uint256 amount) private { token.safeTransfer(to, amount); }\r\n\r\n\t/**\r\n\t * @dev Transfer ERC721 token to destination, used to move token from the vault to the owner on withdraw\r\n\t * @param token to transfer\r\n\t * @param to wallet address\r\n\t * @param tokenId of the ERC721 token to transfer\r\n\t */\r\n\tfunction _transferERC721(IERC721 token, address payable to, uint256 tokenId) private { token.safeTransferFrom(address(this), to, tokenId); }\r\n\r\n\t/**\r\n\t* @dev Implementation of the {IERC165} interface.\r\n\t* @param interfaceId to check\r\n\t* @return true if the interfaceId is supported and false if it is not\r\n\t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Receiver) returns (bool) {\r\n\t\treturn interfaceId == type(IERC721Receiver).interfaceId || \r\n\t\t\tinterfaceId == type(KnowsBestPony).interfaceId || \r\n\t\t\tinterfaceId == type(Ownable).interfaceId || \r\n\t\t\tinterfaceId == type(RecoverableEther).interfaceId || \r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n}"
    },
    "contracts/RecoverableEther.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nabstract contract RecoverableEther is Ownable {\r\n\t/**\r\n\t * @dev Redirect sent ether, no ether should ever be sent to this contract\r\n\t */\r\n\tmodifier redirectEther() {\r\n\t\tif (msg.value > 0) {\r\n\t\t\tpayable(owner()).transfer(msg.value);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction __recoverEther() public virtual payable onlyOwner { payable(owner()).transfer(address(this).balance); }\r\n}"
    },
    "contracts/RecoverableTokens.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./TokenTypeable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nabstract contract RecoverableTokens is Ownable, TokenTypeable {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Withdraw the ERC1155 token of the given type to this contract owner's wallet, does not effect the vault. No tokens should be sent directly to this contract, this fixes instances where they mistakenly are.\r\n\t * @param token to withdraw\r\n\t * @param tokenId to withdraw\r\n\t */\r\n\tfunction __recoverERC1155(IERC1155 token, uint256 tokenId) internal { token.safeTransferFrom(address(this), payable(owner()), tokenId, token.balanceOf(address(this), tokenId), \"\"); }\r\n\r\n\t/**\r\n\t * @dev Withdraw all ERC20 tokens of the given type to this contract owner's wallet, does not effect the vault. No tokens should be sent directly to this contract, this fixes instances where they mistakenly are.\r\n\t * @param token to withdraw\r\n\t */\r\n\tfunction __recoverERC20(IERC20 token) internal { token.safeTransfer(payable(owner()), token.balanceOf(address(this))); }\r\n\r\n\t/**\r\n\t * @dev Withdraw the ERC721 token of the given type to this contract owner's wallet, does not effect the vault. No tokens should be sent directly to this contract, this fixes instances where they mistakenly are.\r\n\t * @param token to withdraw\r\n\t * @param tokenId to withdraw\r\n\t */\r\n\tfunction __recoverERC721(IERC721 token, uint256 tokenId) internal { token.safeTransferFrom(address(this), payable(owner()), tokenId); }\r\n\r\n\tfunction __recoverTokens(TokenType tokenType, address tokenContract, uint256 tokenId) public virtual onlyOwner {\r\n\t\tif (tokenType == TokenType.ERC1155) {\r\n\t\t\t__recoverERC1155(IERC1155(tokenContract), tokenId);\r\n\t\t} else if (tokenType == TokenType.ERC20) {\r\n\t\t\t__recoverERC20(IERC20(tokenContract));\r\n\t\t} else if (tokenType == TokenType.ERC721) {\r\n\t\t\t__recoverERC721(IERC721(tokenContract), tokenId);\r\n\t\t}\r\n\t}\r\n}"
    },
    "contracts/TokenTypeable.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/ITokenTypeable.sol\";\r\n\r\nabstract contract TokenTypeable is ITokenTypeable {\r\n\tmodifier isValidTokenType(TokenType tokenType) {\r\n\t\trequire(tokenType == TokenType.ERC1155 || tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721, \"`tokenType` must represent a supported token: 1 for ERC1155, 2 for ERC20, or 3 for ERC721\");\r\n\t\t_;\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/verifyIPFS-master/contracts/verifyIPFS.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/// @title verifyIPFS\n/// @author Martin Lundfall (martin.lundfall@gmail.com)\nlibrary verifyIPFS {\n  bytes constant prefix1 = hex\"0a\";\n  bytes constant prefix2 = hex\"080212\";\n  bytes constant postfix = hex\"18\";\n  bytes constant sha256MultiHash = hex\"1220\";\n  bytes constant ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\n  /// @dev generates the corresponding IPFS hash (in base 58) to the given string\n  /// @param contentString The content of the IPFS object\n  /// @return The IPFS hash in base 58\n  function generateHash(string memory contentString) internal pure returns (bytes memory) {\n    bytes memory content = bytes(contentString);\n    bytes memory len = lengthEncode(content.length);\n    bytes memory len2 = lengthEncode(content.length + 4 + 2*len.length);\n    return toBase58(concat(sha256MultiHash, toBytes(sha256(abi.encodePacked(prefix1, len2, prefix2, len, content, postfix, len)))));\n  }\n\n  /// @dev Compares an IPFS hash with content\n  function verifyHash(string memory contentString, string memory hash) internal pure returns (bool) {\n    return equal(generateHash(contentString), bytes(hash));\n  }\n  \n  /// @dev Converts hex string to base 58\n  function toBase58(bytes memory source) internal pure returns (bytes memory) {\n    if (source.length == 0) return new bytes(0);\n    uint8[] memory digits = new uint8[](64); //TODO: figure out exactly how much is needed\n    digits[0] = 0;\n    uint8 digitlength = 1;\n    for (uint256 i = 0; i<source.length; ++i) {\n      uint carry = uint8(source[i]);\n      for (uint256 j = 0; j<digitlength; ++j) {\n        carry += uint(digits[j]) * 256;\n        digits[j] = uint8(carry % 58);\n        carry = carry / 58;\n      }\n      \n      while (carry > 0) {\n        digits[digitlength] = uint8(carry % 58);\n        digitlength++;\n        carry = carry / 58;\n      }\n    }\n    //return digits;\n    return toAlphabet(reverse(truncate(digits, digitlength)));\n  }\n\n  function lengthEncode(uint256 length) internal pure returns (bytes memory) {\n    if (length < 128) {\n      return to_binary(length);\n    }\n    else {\n      return concat(to_binary(length % 128 + 128), to_binary(length / 128));\n    }\n  }\n\n  function toBytes(bytes32 input) internal pure returns (bytes memory) {\n    bytes memory output = new bytes(32);\n    for (uint8 i = 0; i<32; i++) {\n      output[i] = input[i];\n    }\n    return output;\n  }\n    \n  function equal(bytes memory one, bytes memory two) internal pure returns (bool) {\n    if (!(one.length == two.length)) {\n      return false;\n    }\n    for (uint256 i = 0; i<one.length; i++) {\n      if (!(one[i] == two[i])) {\n\treturn false;\n      }\n    }\n    return true;\n  }\n\n  function truncate(uint8[] memory array, uint8 length) internal pure returns (uint8[] memory) {\n    uint8[] memory output = new uint8[](length);\n    for (uint256 i = 0; i<length; i++) {\n        output[i] = array[i];\n    }\n    return output;\n  }\n  \n  function reverse(uint8[] memory input) internal pure returns (uint8[] memory) {\n    uint8[] memory output = new uint8[](input.length);\n    for (uint256 i = 0; i<input.length; i++) {\n        output[i] = input[input.length-1-i];\n    }\n    return output;\n  }\n  \n  function toAlphabet(uint8[] memory indices) internal pure returns (bytes memory) {\n    bytes memory output = new bytes(indices.length);\n    for (uint256 i = 0; i<indices.length; i++) {\n        output[i] = ALPHABET[indices[i]];\n    }\n    return output;\n  }\n\n  function concat(bytes memory byteArray, bytes memory byteArray2) internal pure returns (bytes memory) {\n    bytes memory returnArray = new bytes(byteArray.length + byteArray2.length);\n    uint i = 0;\n    for (i; i < byteArray.length; i++) {\n      returnArray[i] = byteArray[i];\n    }\n    for (i; i < (byteArray.length + byteArray2.length); i++) {\n      returnArray[i] = byteArray2[i - byteArray.length];\n    }\n    return returnArray;\n  }\n    \n  function to_binary(uint256 x) internal pure returns (bytes memory) {\n    if (x == 0) {\n      return new bytes(0);\n    }\n    else {\n      bytes1 s = bytes1(uint8(x % 256));\n      bytes memory r = new bytes(1);\n      r[0] = s;\n      return concat(to_binary(x / 256), r);\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IMarebitsLockerToken.sol": {
      "content": "// SPDX-License-Identifier: LicenseRef-DSPL\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\n\r\ninterface IMarebitsLockerToken is IERC721Metadata {\r\n\tfunction burn(uint256 tokenId) external;\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}